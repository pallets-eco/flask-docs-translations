# SOME DESCRIPTIVE TITLE.
# Copyright (C) 2010 Pallets
# This file is distributed under the same license as the Flask package.
# Grey Li <withlihui@gmail.com>, 2021.
#
#, fuzzy
msgid ""
msgstr ""
"Project-Id-Version: Flask 2.1.x\n"
"Report-Msgid-Bugs-To: \n"
"POT-Creation-Date: 2024-11-20 19:31-0800\n"
"PO-Revision-Date: YEAR-MO-DA HO:MI+ZONE\n"
"Last-Translator: Grey Li <withlihui@gmail.com>\n"
"Language-Team: zh_CN <withlihui@gmail.com>\n"
"MIME-Version: 1.0\n"
"Content-Type: text/plain; charset=utf-8\n"
"Content-Transfer-Encoding: 8bit\n"
"Generated-By: Babel 2.16.0\n"

#: ../../project/docs/tutorial/database.rst:4 c6ca508666cc429499841107fc118d14
msgid "Define and Access the Database"
msgstr "定义并访问数据库"

#: ../../project/docs/tutorial/database.rst:6 9f0673d8a9af4afe9cb0d859e4c15176
msgid ""
"The application will use a `SQLite`_ database to store users and posts. "
"Python comes with built-in support for SQLite in the :mod:`sqlite3` "
"module."
msgstr ""
"这个应用将会使用 `SQLite`_ 数据库来存储用户和帖子。Python 在自带的 :mod:`sqlite3` 模块内置了对 SQLite "
"的支持。"

#: ../../project/docs/tutorial/database.rst:10 1b7c47ae830140d4aea6a4484551dcdd
msgid ""
"SQLite is convenient because it doesn't require setting up a separate "
"database server and is built-in to Python. However, if concurrent "
"requests try to write to the database at the same time, they will slow "
"down as each write happens sequentially. Small applications won't notice "
"this. Once you become big, you may want to switch to a different "
"database."
msgstr ""
"SQLite 很方便，因为它不需要设置一个额外的数据库服务器，而且 Python "
"内置了对它的支持。然而，如果并发的请求试图同时写入数据库，它们会让应用变慢，因为每一个写入操作会依次进行。小的应用不会注意到这一点。当你的应用变大，你也许想要切换到不同的数据库。"

#: ../../project/docs/tutorial/database.rst:17 4e9f4e696f0f48d698dca0b71a7a5328
msgid ""
"The tutorial doesn't go into detail about SQL. If you are not familiar "
"with it, the SQLite docs describe the `language`_."
msgstr "这个教程没有详细介绍 SQL。如果你对它不熟悉，SQLite 文档描述了 `这个语言`_。"

#: ../../project/docs/tutorial/database.rst:25 140133c44429469183825c05fb6313a3
msgid "Connect to the Database"
msgstr "连接数据库"

#: ../../project/docs/tutorial/database.rst:27 324f192d9eb947f2afe1fa71b4168868
msgid ""
"The first thing to do when working with a SQLite database (and most other"
" Python database libraries) is to create a connection to it. Any queries "
"and operations are performed using the connection, which is closed after "
"the work is finished."
msgstr ""
"使用 SQLite 数据库（和其他大多数 Python "
"数据库包）时，要做的第一件事是和它建立一个连接。任何查询和操作都使用这个连接进行，当工作完成后它会被关闭。"

#: ../../project/docs/tutorial/database.rst:32 7be9486d07f140fd98b436d5fdccf9aa
msgid ""
"In web applications this connection is typically tied to the request. It "
"is created at some point when handling a request, and closed before the "
"response is sent."
msgstr "在 web 应用中，这个连接通常会绑定到请求上。它会在处理一个请求时被创建，然后在响应发送之前被关闭。"

#: ../../project/docs/tutorial/database.rst:36
#: ../../project/docs/tutorial/database.rst:120
#: ../../project/docs/tutorial/database.rst:165
#: 2e0a076f261e4a5998d97bcee39db3a2 443bbf5dc3244d419a025c7cfb0d2367
#: 6fe0d9db8c414fc9bcbceec2ab6b6826
msgid "``flaskr/db.py``"
msgstr "``flaskr/db.py``"

#: ../../project/docs/tutorial/database.rst:63 ceee35fd31dc4e4a8efb19f9712ba683
msgid ""
":data:`g` is a special object that is unique for each request. It is used"
" to store data that might be accessed by multiple functions during the "
"request. The connection is stored and reused instead of creating a new "
"connection if ``get_db`` is called a second time in the same request."
msgstr ""
":data:`g` 是一个特殊的对象，它对每一个请求都是唯一的。它被用来存储在处理请求时可能会被多个函数访问的数据。如果 ``get_db`` "
"在同一个请求中被二次调用，该连接会被存储和复用，而不是创建一个新的连接。"

#: ../../project/docs/tutorial/database.rst:69 a1af881658ff4877b1afc1f32e797397
msgid ""
":data:`current_app` is another special object that points to the Flask "
"application handling the request. Since you used an application factory, "
"there is no application object when writing the rest of your code. "
"``get_db`` will be called when the application has been created and is "
"handling a request, so :data:`current_app` can be used."
msgstr ""
":data:`current_app` 是另一个特殊的对象，它指向处理请求的 Flask "
"应用。因为你使用了一个应用工厂，所以当写其他部分代码时没有应用对象。当应用被创建并且正在处理一个请求时，``get_db`` "
"将会被调用，所以可以使用 :data:`current_app`。"

#: ../../project/docs/tutorial/database.rst:75 50bf1d5f91674bd0802be892e4b09c3a
msgid ""
":func:`sqlite3.connect` establishes a connection to the file pointed at "
"by the ``DATABASE`` configuration key. This file doesn't have to exist "
"yet, and won't until you initialize the database later."
msgstr ""
":func:`sqlite3.connect` 建立一个连接到配置键 ``DATABASE`` "
"指向的文件。这个文件还不存在，直到你之后初始化数据库才会被创建。"

#: ../../project/docs/tutorial/database.rst:79 ea68cfbe00704e798517ca59e3dac68e
msgid ""
":class:`sqlite3.Row` tells the connection to return rows that behave like"
" dicts. This allows accessing the columns by name."
msgstr ":class:`sqlite3.Row` 告诉这个连接返回行为和字典一样的行。这允许你通过名称访问列。"

#: ../../project/docs/tutorial/database.rst:82 c84fb4081ee141f48f5a0ee9e6581ba4
msgid ""
"``close_db`` checks if a connection was created by checking if ``g.db`` "
"was set. If the connection exists, it is closed. Further down you will "
"tell your application about the ``close_db`` function in the application "
"factory so that it is called after each request."
msgstr ""
"``close_db`` 通过判断 ``g.db`` 是否被设置来检查一个连接是否被创建。如果连接存在，它将被关闭。接下来，你将会在应用工厂里把 "
"``close_db`` 函数引入你的应用，以便在每个请求之后调用它。"

#: ../../project/docs/tutorial/database.rst:89 96e57b6a81c64d92a7a6c5c3206871f7
msgid "Create the Tables"
msgstr "创建表"

#: ../../project/docs/tutorial/database.rst:91 7bbc95d5d8c34b029fcbd7dc60f1dddb
msgid ""
"In SQLite, data is stored in *tables* and *columns*. These need to be "
"created before you can store and retrieve data. Flaskr will store users "
"in the ``user`` table, and posts in the ``post`` table. Create a file "
"with the SQL commands needed to create empty tables:"
msgstr ""
"在 SQLite 中，数据被存储在 *表* 和 *列* 中。在你可以存储和获取数据之前，需要先创建它们。Flaskr 将会存储用户到 "
"``user`` 表，存储帖子到 ``post`` 表。创建一个文件来存储创建空表所需的 SQL 命令："

#: ../../project/docs/tutorial/database.rst:96 c96601a88e5041fb90b2329fbffbb493
msgid "``flaskr/schema.sql``"
msgstr "``flaskr/schema.sql``"

#: ../../project/docs/tutorial/database.rst:117
#: e16fd8f8f05944c48937537b985a9d73
msgid ""
"Add the Python functions that will run these SQL commands to the "
"``db.py`` file:"
msgstr "把将会运行这些 SQL 命令的的 Python 函数添加到 ``db.py`` 文件："

#: ../../project/docs/tutorial/database.rst:141
#: 0ab5a47db21544fa9bd764c847f13436
msgid ""
":meth:`open_resource() <Flask.open_resource>` opens a file relative to "
"the ``flaskr`` package, which is useful since you won't necessarily know "
"where that location is when deploying the application later. ``get_db`` "
"returns a database connection, which is used to execute the commands read"
" from the file."
msgstr ""
":meth:`open_resource() <Flask.open_resource>` 打开一个相对于 ``flaskr`` "
"包的文件，这很有用，因为当后续部署应用的时候你不用知道文件的位置在哪里。``get_db`` 返回一个数据库连接，用来执行从文件中读取的命令。"

#: ../../project/docs/tutorial/database.rst:147
#: 08a50c96644a4bb6a40ef34d7f932a0e
msgid ""
":func:`click.command` defines a command line command called ``init-db`` "
"that calls the ``init_db`` function and shows a success message to the "
"user. You can read :doc:`/cli` to learn more about writing commands."
msgstr ""
":func:`click.command` 定义了一个名为 ``init-db`` 的命令行命令，这个命令会调用 ``init_db`` "
"函数并向用户显示一个成功消息。你可以阅读 :doc:`/cli` 学习更多关于编写命令的内容。"

#: ../../project/docs/tutorial/database.rst:151
#: 163c122b3a2f488187f8f32da7f871d0
msgid ""
"The call to :func:`sqlite3.register_converter` tells Python how to "
"interpret timestamp values in the database. We convert the value to a "
":class:`datetime.datetime`."
msgstr ""

#: ../../project/docs/tutorial/database.rst:157
#: 12ed5fe5f2c24f94b071893ac339f0ba
msgid "Register with the Application"
msgstr "注册到应用"

#: ../../project/docs/tutorial/database.rst:159
#: 09cbf5f8d76c4789a5c34749c412e5a4
msgid ""
"The ``close_db`` and ``init_db_command`` functions need to be registered "
"with the application instance; otherwise, they won't be used by the "
"application. However, since you're using a factory function, that "
"instance isn't available when writing the functions. Instead, write a "
"function that takes an application and does the registration."
msgstr ""
"``close_db`` 和 ``init_db_command`` "
"函数需要被注册到应用实例；否则的话，他们不会被应用使用。然而，因为你正在使用工厂函数，该实例没法在这些函数里使用。取而代之的是，写一个函数，接受一个应用作为参数并实现注册。"

#: ../../project/docs/tutorial/database.rst:172
#: 733b6d992d43429e8429b4f4135c5aa5
msgid ""
":meth:`app.teardown_appcontext() <Flask.teardown_appcontext>` tells Flask"
" to call that function when cleaning up after returning the response."
msgstr ""
":meth:`app.teardown_appcontext() <Flask.teardown_appcontext>` 告诉 "
"Flask在返回响应以后进行清理时调用该函数。"

#: ../../project/docs/tutorial/database.rst:176
#: f8956fb99d6a403facdfbf157bf959c7
msgid ""
":meth:`app.cli.add_command() <click.Group.add_command>` adds a new "
"command that can be called with the ``flask`` command."
msgstr ""
":meth:`app.cli.add_command() <click.Group.add_command>` 添加一个新的命令，可以使用 "
"``flask`` 命令调用。"

#: ../../project/docs/tutorial/database.rst:179
#: a52b2296ac85446cb04640e92446a438
msgid ""
"Import and call this function from the factory. Place the new code at the"
" end of the factory function before returning the app."
msgstr "在工厂里导入并调用这个函数。把新的代码放到工厂函数的末尾，在返回应用之前。"

#: ../../project/docs/tutorial/database.rst:182
#: e763c27a7c7b4e36af176a8575845a25
msgid "``flaskr/__init__.py``"
msgstr "``flaskr/__init__.py``"

#: ../../project/docs/tutorial/database.rst:196
#: 656158d1eebf4da19d8dcf0f80e9e05d
msgid "Initialize the Database File"
msgstr "初始化数据库文件"

#: ../../project/docs/tutorial/database.rst:198
#: f77d15ea10e247bfa15ea83b40f77d48
msgid ""
"Now that ``init-db`` has been registered with the app, it can be called "
"using the ``flask`` command, similar to the ``run`` command from the "
"previous page."
msgstr "现在 ``init-db`` 已经注册到应用，你可以使用 ``flask`` 命令调用它，类似上一章的 ``run`` 命令。"

#: ../../project/docs/tutorial/database.rst:204
#: 33b1ddc5ea0c44f888d3c3ee992fd5d0
#, fuzzy
msgid ""
"If you're still running the server from the previous page, you can either"
" stop the server, or run this command in a new terminal. If you use a new"
" terminal, remember to change to your project directory and activate the "
"env as described in :doc:`/installation`."
msgstr ""
"如果你仍然运行着上一章介绍的服务器，你可以停止服务器，或是在新的终端运行这个命令。如果你使用一个新的终端，记得切换到项目目录，激活在 "
":doc:`/installation` 里描述的虚拟环境。你还将需要设置上一章介绍的 ``FLASK_APP`` 和 "
"``FLASK_ENV``。"

#: ../../project/docs/tutorial/database.rst:209
#: 6e6cf49e0a914873a63c923bacedc9d3
msgid "Run the ``init-db`` command:"
msgstr "运行 ``init-db`` 命令："

#: ../../project/docs/tutorial/database.rst:216
#: b211b9fa6c304c2ca5d06a9a802b5d09
msgid ""
"There will now be a ``flaskr.sqlite`` file in the ``instance`` folder in "
"your project."
msgstr "现在在你项目的 ``instance`` 文件夹中会有一个 ``flaskr.sqlite`` 文件。"

#: ../../project/docs/tutorial/database.rst:219
#: 24b9e0b8bef2462fab7d31a4f9ec3441
msgid "Continue to :doc:`views`."
msgstr "继续阅读 :doc:`views`。"

