# SOME DESCRIPTIVE TITLE.
# Copyright (C) 2010 Pallets
# This file is distributed under the same license as the Flask package.
# FIRST AUTHOR <EMAIL@ADDRESS>, 2024.
#
#, fuzzy
msgid ""
msgstr ""
"Project-Id-Version: Flask 3.0.x\n"
"Report-Msgid-Bugs-To: \n"
"POT-Creation-Date: 2024-11-20 19:31-0800\n"
"PO-Revision-Date: 2024-06-21 01:01+0900\n"
"Last-Translator: blingblin-g <luvbliny@gmail.com>\n"
"Language: ko\n"
"Language-Team: ko <LL@li.org>\n"
"Plural-Forms: nplurals=1; plural=0;\n"
"MIME-Version: 1.0\n"
"Content-Type: text/plain; charset=utf-8\n"
"Content-Transfer-Encoding: 8bit\n"
"Generated-By: Babel 2.16.0\n"

#: ../../project/docs/quickstart.rst:2 072c4cb240e240ee88d518604b3c098d
msgid "Quickstart"
msgstr "빠른 시작"

#: ../../project/docs/quickstart.rst:4 a8ac97379d1e4478b3fccbd67ea024f6
msgid ""
"Eager to get started? This page gives a good introduction to Flask. "
"Follow :doc:`installation` to set up a project and install Flask first."
msgstr ""
"시작하고 싶으신가요? 이 페이지는 Flask에 대한 좋은 소개를 제공합니다. 먼저 :doc:`installation`  을 따라 "
"프로젝트를 설정하고 Flask를 설치해보세요."

#: ../../project/docs/quickstart.rst:9 e87344e0245f461d9266268c6887cae5
msgid "A Minimal Application"
msgstr "최소한의 애플리케이션"

#: ../../project/docs/quickstart.rst:11 396e00a2c7d94351b2fa9d5b0a4c6c02
msgid "A minimal Flask application looks something like this:"
msgstr "최소한의 Flask 애플리케이션은 다음과 같습니다:"

#: ../../project/docs/quickstart.rst:23 f0b94c74deca4fb8995c25cb20c840f4
msgid "So what did that code do?"
msgstr "이 코드가 어떤 일을 할까요?"

#: ../../project/docs/quickstart.rst:25 30605ed7b79b4554818bcb61f79ae017
msgid ""
"First we imported the :class:`~flask.Flask` class. An instance of this "
"class will be our WSGI application."
msgstr ""
"첫째로, :class:`~flask.Flask`  클래스를 임포트했습니다. 이 클래스의 인스턴스는 저희의 WSGI 애플리케이션이 될"
" 것입니다."

#: ../../project/docs/quickstart.rst:27 641342ec8f934497ab62092bae5a3281
msgid ""
"Next we create an instance of this class. The first argument is the name "
"of the application's module or package. ``__name__`` is a convenient "
"shortcut for this that is appropriate for most cases. This is needed so "
"that Flask knows where to look for resources such as templates and static"
" files."
msgstr ""
"다음으로 이 클래스의 인스턴스를 생성합니다. 첫 번째 인자는 애플리케이션의 모듈이나 패키지의 이름입니다.  ``__name__``"
"  은 대부분의 경우에 적합한 이를 위한 편리한 단축입니다. 이것은 Flask가 템플릿이나 정적 파일과 같은 리소스를 찾을 위치를 "
"알 수 있도록 필요합니다."

#: ../../project/docs/quickstart.rst:32 45c6469fa87d4f8aa46d11319a50a860
msgid ""
"We then use the :meth:`~flask.Flask.route` decorator to tell Flask what "
"URL should trigger our function."
msgstr ""
"그런 다음, :meth:`~flask.Flask.route` 데코레이터를 사용하여 Flask에게 어떤 URL이 우리 함수를 "
"트리거해야 하는지 알려줍니다."

#: ../../project/docs/quickstart.rst:34 cfc675cf49514588908182a1fce142d4
msgid ""
"The function returns the message we want to display in the user's "
"browser. The default content type is HTML, so HTML in the string will be "
"rendered by the browser."
msgstr ""
"이 함수는 사용자의 브라우저에 표시할 메시지를 반환합니다. 기본 콘텐츠 유형은 HTML이므로 문자열 안의 HTML이 브라우저에 의해"
" 렌더링될 것입니다."

#: ../../project/docs/quickstart.rst:38 f5ec99a5ae614a9ba26780187216530f
msgid ""
"Save it as :file:`hello.py` or something similar. Make sure to not call "
"your application :file:`flask.py` because this would conflict with Flask "
"itself."
msgstr ""
"이를 `hello.py`  와 같이 파일로 저장하세요. 단, 애플리케이션을 `flask.py`  와 같이 이름 짓지 마세요. 이는 "
"Flask 자체와 충돌할 수 있습니다."

#: ../../project/docs/quickstart.rst:42 839c0399bdf24a6d986d2849bcdd3c8f
msgid ""
"To run the application, use the ``flask`` command or ``python -m flask``."
" You need to tell the Flask where your application is with the ``--app`` "
"option."
msgstr ""
"애플리케이션을 실행하려면 ``flask`` 명령어나 ``python -m flask`` 를 사용하세요. Flask에게 애플리케이션이"
" 위치한 곳을 알려주기 위해 ``—app`` 옵션을 사용해야 합니다."

#: ../../project/docs/quickstart.rst:52 065be0391fa9431eac148d38072ca985
msgid "Application Discovery Behavior"
msgstr ""

#: ../../project/docs/quickstart.rst:54 921fab71c2254193ae9a288f2ed6fc48
msgid ""
"As a shortcut, if the file is named ``app.py`` or ``wsgi.py``, you don't "
"have to use ``--app``. See :doc:`/cli` for more details."
msgstr ""

#: ../../project/docs/quickstart.rst:57 c519fca9387f4421b38dd160c9aadb74
msgid ""
"This launches a very simple builtin server, which is good enough for "
"testing but probably not what you want to use in production. For "
"deployment options see :doc:`deploying/index`."
msgstr ""

#: ../../project/docs/quickstart.rst:61 2834e151d2ca49f48b990cf655032675
msgid ""
"Now head over to http://127.0.0.1:5000/, and you should see your hello "
"world greeting."
msgstr ""

#: ../../project/docs/quickstart.rst:64 ad65b3803432439bbbe6c506eca24b97
msgid ""
"If another program is already using port 5000, you'll see ``OSError: "
"[Errno 98]`` or ``OSError: [WinError 10013]`` when the server tries to "
"start. See :ref:`address-already-in-use` for how to handle that."
msgstr ""

#: ../../project/docs/quickstart.rst:71 6881455685bf4518843a3a764c368068
msgid "Externally Visible Server"
msgstr ""

#: ../../project/docs/quickstart.rst:73 8182b82dc38e49958d2dccac4afad929
msgid ""
"If you run the server you will notice that the server is only accessible "
"from your own computer, not from any other in the network.  This is the "
"default because in debugging mode a user of the application can execute "
"arbitrary Python code on your computer."
msgstr ""

#: ../../project/docs/quickstart.rst:78 38963a7aa05347e185944d4615d3c20b
msgid ""
"If you have the debugger disabled or trust the users on your network, you"
" can make the server publicly available simply by adding "
"``--host=0.0.0.0`` to the command line::"
msgstr ""

#: ../../project/docs/quickstart.rst:84 6976c2592d4b420eb5709d5361a33d90
msgid "This tells your operating system to listen on all public IPs."
msgstr ""

#: ../../project/docs/quickstart.rst:88 9cb26ee6c8e449aca7f1184b312b426e
msgid "Debug Mode"
msgstr ""

#: ../../project/docs/quickstart.rst:90 caa3121ac3e54402be2cb680649ecda5
msgid ""
"The ``flask run`` command can do more than just start the development "
"server. By enabling debug mode, the server will automatically reload if "
"code changes, and will show an interactive debugger in the browser if an "
"error occurs during a request."
msgstr ""

#: ../../project/docs/quickstart.rst:95 7ba338e2ba664f919d528d60dd14365c
msgid "The interactive debugger in action."
msgstr ""

#: ../../project/docs/quickstart.rst:102 81d0b4087a7d4c5c84c64b8b9e54e959
msgid ""
"The debugger allows executing arbitrary Python code from the browser. It "
"is protected by a pin, but still represents a major security risk. Do not"
" run the development server or debugger in a production environment."
msgstr ""

#: ../../project/docs/quickstart.rst:107 f0f6e79c9eea4278bf40423dcfdc1db2
msgid "To enable debug mode, use the ``--debug`` option."
msgstr ""

#: ../../project/docs/quickstart.rst:119 89b2013e81964b9ca87a46948493ff55
msgid "See also:"
msgstr ""

#: ../../project/docs/quickstart.rst:121 4ab0d5e448e24eb28393a3a2d65e37a7
msgid ""
":doc:`/server` and :doc:`/cli` for information about running in debug "
"mode."
msgstr ""

#: ../../project/docs/quickstart.rst:122 c8a9fed226cf4064baedea632c412fee
msgid ""
":doc:`/debugging` for information about using the built-in debugger and "
"other debuggers."
msgstr ""

#: ../../project/docs/quickstart.rst:124 c7f1d156a5f24431b8516e4295242a67
msgid ""
":doc:`/logging` and :doc:`/errorhandling` to log errors and display nice "
"error pages."
msgstr ""

#: ../../project/docs/quickstart.rst:129 ccdc5a632e8b4c2abc9c471dca22bf91
msgid "HTML Escaping"
msgstr ""

#: ../../project/docs/quickstart.rst:131 860638517045439a9d41bab941e9c9bd
msgid ""
"When returning HTML (the default response type in Flask), any user-"
"provided values rendered in the output must be escaped to protect from "
"injection attacks. HTML templates rendered with Jinja, introduced later, "
"will do this automatically."
msgstr ""

#: ../../project/docs/quickstart.rst:136 882a6ed30e254d1ead37f0e986be4c38
msgid ""
":func:`~markupsafe.escape`, shown here, can be used manually. It is "
"omitted in most examples for brevity, but you should always be aware of "
"how you're using untrusted data."
msgstr ""

#: ../../project/docs/quickstart.rst:148 ba15bb36ab19407081cbfc83c9ee0681
msgid ""
"If a user managed to submit the name ``<script>alert(\"bad\")</script>``,"
" escaping causes it to be rendered as text, rather than running the "
"script in the user's browser."
msgstr ""

#: ../../project/docs/quickstart.rst:152 4c686c42af1e4309a8469cd0e743c4d7
msgid ""
"``<name>`` in the route captures a value from the URL and passes it to "
"the view function. These variable rules are explained below."
msgstr ""

#: ../../project/docs/quickstart.rst:157 b1e18677e1f944c1adfe059c9fb5e3ef
msgid "Routing"
msgstr ""

#: ../../project/docs/quickstart.rst:159 1bc848c730424794bff4c31a70f806a5
msgid ""
"Modern web applications use meaningful URLs to help users. Users are more"
" likely to like a page and come back if the page uses a meaningful URL "
"they can remember and use to directly visit a page."
msgstr ""

#: ../../project/docs/quickstart.rst:163 f2b9df10b8184644a95ee9df3a1906b7
msgid ""
"Use the :meth:`~flask.Flask.route` decorator to bind a function to a URL."
" ::"
msgstr ""

#: ../../project/docs/quickstart.rst:173 a125e8809bf74a2abf4c3a41aca1fc19
msgid ""
"You can do more! You can make parts of the URL dynamic and attach "
"multiple rules to a function."
msgstr ""

#: ../../project/docs/quickstart.rst:177 54ff811a374e4590b3dda562119f2c02
msgid "Variable Rules"
msgstr ""

#: ../../project/docs/quickstart.rst:179 44a9f1eccd4742bf90a71c7b80282f8c
msgid ""
"You can add variable sections to a URL by marking sections with "
"``<variable_name>``. Your function then receives the ``<variable_name>`` "
"as a keyword argument. Optionally, you can use a converter to specify the"
" type of the argument like ``<converter:variable_name>``. ::"
msgstr ""

#: ../../project/docs/quickstart.rst:201 0c1d64ff76be4ff6b52b7d3e1b833245
msgid "Converter types:"
msgstr ""

#: ../../project/docs/quickstart.rst:204 abdfc2de097b4bb49338652271c1d52e
msgid "``string``"
msgstr ""

#: ../../project/docs/quickstart.rst:204 42a40812e2404ae2aa21cd2eefe6f2de
msgid "(default) accepts any text without a slash"
msgstr ""

#: ../../project/docs/quickstart.rst:205 812f474f73c447869e63be912ea61492
msgid "``int``"
msgstr ""

#: ../../project/docs/quickstart.rst:205 0dcc8042218b40e1a838225b493416b4
msgid "accepts positive integers"
msgstr ""

#: ../../project/docs/quickstart.rst:206 cd10e5dd4e644fbc9759e6b0000fa398
msgid "``float``"
msgstr ""

#: ../../project/docs/quickstart.rst:206 115a2c7b2e384ae0adbd4a70c0fb94e9
msgid "accepts positive floating point values"
msgstr ""

#: ../../project/docs/quickstart.rst:207 8d00c0ee5d5949649dbb552a9c7b7a55
msgid "``path``"
msgstr ""

#: ../../project/docs/quickstart.rst:207 c16b271f6640414893a3fa5acf32330b
msgid "like ``string`` but also accepts slashes"
msgstr ""

#: ../../project/docs/quickstart.rst:208 ca8584245682488cbbbe56766f06a7e0
msgid "``uuid``"
msgstr ""

#: ../../project/docs/quickstart.rst:208 00321a5d7dff4ce0aab1cf4e2b60e66d
msgid "accepts UUID strings"
msgstr ""

#: ../../project/docs/quickstart.rst:213 c14cc837143a41ffa3ff3b4954b90ec3
msgid "Unique URLs / Redirection Behavior"
msgstr ""

#: ../../project/docs/quickstart.rst:215 fe8df7deb1a64de5ac02e5453cf20530
msgid "The following two rules differ in their use of a trailing slash. ::"
msgstr ""

#: ../../project/docs/quickstart.rst:225 09c1960c2ce14c3c8e2dbbdf3dfbf80a
msgid ""
"The canonical URL for the ``projects`` endpoint has a trailing slash. "
"It's similar to a folder in a file system. If you access the URL without "
"a trailing slash (``/projects``), Flask redirects you to the canonical "
"URL with the trailing slash (``/projects/``)."
msgstr ""

#: ../../project/docs/quickstart.rst:230 48c5af12fd634d34a79d2e75a9670824
msgid ""
"The canonical URL for the ``about`` endpoint does not have a trailing "
"slash. It's similar to the pathname of a file. Accessing the URL with a "
"trailing slash (``/about/``) produces a 404 \"Not Found\" error. This "
"helps keep URLs unique for these resources, which helps search engines "
"avoid indexing the same page twice."
msgstr ""

#: ../../project/docs/quickstart.rst:240 c35a47346603474c98280f584038e767
msgid "URL Building"
msgstr ""

#: ../../project/docs/quickstart.rst:242 96b281646519448e93eddd340e2a4900
msgid ""
"To build a URL to a specific function, use the :func:`~flask.url_for` "
"function. It accepts the name of the function as its first argument and "
"any number of keyword arguments, each corresponding to a variable part of"
" the URL rule. Unknown variable parts are appended to the URL as query "
"parameters."
msgstr ""

#: ../../project/docs/quickstart.rst:247 3e41eabc111c45b5a6a2cbb05c69c495
msgid ""
"Why would you want to build URLs using the URL reversing function "
":func:`~flask.url_for` instead of hard-coding them into your templates?"
msgstr ""

#: ../../project/docs/quickstart.rst:250 83242835c2184f11be23fda4c1f3bec4
msgid "Reversing is often more descriptive than hard-coding the URLs."
msgstr ""

#: ../../project/docs/quickstart.rst:251 7239d0f7a149454e8f4400f1ca14bb29
msgid ""
"You can change your URLs in one go instead of needing to remember to "
"manually change hard-coded URLs."
msgstr ""

#: ../../project/docs/quickstart.rst:253 4c1e8285c41c4a37b02c714cddb08b5c
msgid "URL building handles escaping of special characters transparently."
msgstr ""

#: ../../project/docs/quickstart.rst:254 494f632ea1f44c0cbeddc09b7ac402b8
msgid ""
"The generated paths are always absolute, avoiding unexpected behavior of "
"relative paths in browsers."
msgstr ""

#: ../../project/docs/quickstart.rst:256 c3ee43d067d44187aefd037e2e5b2c66
msgid ""
"If your application is placed outside the URL root, for example, in "
"``/myapplication`` instead of ``/``, :func:`~flask.url_for` properly "
"handles that for you."
msgstr ""

#: ../../project/docs/quickstart.rst:260 95a85f98bb3e4a28a4119f3e8b6dde03
msgid ""
"For example, here we use the :meth:`~flask.Flask.test_request_context` "
"method to try out :func:`~flask.url_for`. "
":meth:`~flask.Flask.test_request_context` tells Flask to behave as though"
" it's handling a request even while we use a Python shell. See :ref"
":`context-locals`."
msgstr ""

#: ../../project/docs/quickstart.rst:296 2bf0e7c3cca5413487009a1aa2bbeff4
msgid "HTTP Methods"
msgstr ""

#: ../../project/docs/quickstart.rst:298 c95a61d9ef7049728417940101edae2c
msgid ""
"Web applications use different HTTP methods when accessing URLs. You "
"should familiarize yourself with the HTTP methods as you work with Flask."
" By default, a route only answers to ``GET`` requests. You can use the "
"``methods`` argument of the :meth:`~flask.Flask.route` decorator to "
"handle different HTTP methods. ::"
msgstr ""

#: ../../project/docs/quickstart.rst:313 97f958d655574e5ba545d0e9d67cdc3c
msgid ""
"The example above keeps all methods for the route within one function, "
"which can be useful if each part uses some common data."
msgstr ""

#: ../../project/docs/quickstart.rst:316 772583c8c0434b61b01779821fa51155
msgid ""
"You can also separate views for different methods into different "
"functions. Flask provides a shortcut for decorating such routes with "
":meth:`~flask.Flask.get`, :meth:`~flask.Flask.post`, etc. for each common"
" HTTP method."
msgstr ""

#: ../../project/docs/quickstart.rst:331 6b104b969468453db9dde902877a7576
msgid ""
"If ``GET`` is present, Flask automatically adds support for the ``HEAD`` "
"method and handles ``HEAD`` requests according to the `HTTP RFC`_. "
"Likewise, ``OPTIONS`` is automatically implemented for you."
msgstr ""

#: ../../project/docs/quickstart.rst:338 5b1adc0a2b194e35bc0977c5bf28a221
msgid "Static Files"
msgstr ""

#: ../../project/docs/quickstart.rst:340 b8aeff8562be496c999d208752cebc3b
msgid ""
"Dynamic web applications also need static files.  That's usually where "
"the CSS and JavaScript files are coming from.  Ideally your web server is"
" configured to serve them for you, but during development Flask can do "
"that as well.  Just create a folder called :file:`static` in your package"
" or next to your module and it will be available at ``/static`` on the "
"application."
msgstr ""

#: ../../project/docs/quickstart.rst:346 b2ff85243bca4b199efce4c5f3a2910e
msgid ""
"To generate URLs for static files, use the special ``'static'`` endpoint "
"name::"
msgstr ""

#: ../../project/docs/quickstart.rst:350 e777693155da432ca1ae17df3166716a
msgid "The file has to be stored on the filesystem as :file:`static/style.css`."
msgstr ""

#: ../../project/docs/quickstart.rst:353 4e4f12c1dc0543569fa3126eb2b55ea9
msgid "Rendering Templates"
msgstr ""

#: ../../project/docs/quickstart.rst:355 09b6de77ee174edc9eefb58e81931718
msgid ""
"Generating HTML from within Python is not fun, and actually pretty "
"cumbersome because you have to do the HTML escaping on your own to keep "
"the application secure.  Because of that Flask configures the `Jinja2 "
"<https://palletsprojects.com/p/jinja/>`_ template engine for you "
"automatically."
msgstr ""

#: ../../project/docs/quickstart.rst:360 a0c257e3541e41e99a6fa23e00678046
msgid ""
"Templates can be used to generate any type of text file. For web "
"applications, you'll primarily be generating HTML pages, but you can also"
" generate markdown, plain text for emails, and anything else."
msgstr ""

#: ../../project/docs/quickstart.rst:364 fc360802189b4c71a4bd9b6ff2a88f24
msgid "For a reference to HTML, CSS, and other web APIs, use the `MDN Web Docs`_."
msgstr ""

#: ../../project/docs/quickstart.rst:368 06be61d85a6b4834a610ffe47c8af62a
msgid ""
"To render a template you can use the :func:`~flask.render_template` "
"method.  All you have to do is provide the name of the template and the "
"variables you want to pass to the template engine as keyword arguments. "
"Here's a simple example of how to render a template::"
msgstr ""

#: ../../project/docs/quickstart.rst:380 f8999b415603498fbf3293a2f1d797e4
msgid ""
"Flask will look for templates in the :file:`templates` folder.  So if "
"your application is a module, this folder is next to that module, if it's"
" a package it's actually inside your package:"
msgstr ""

#: ../../project/docs/quickstart.rst:384 725024a0a7b24f658246b76fe5fde7d2
msgid "**Case 1**: a module::"
msgstr ""

#: ../../project/docs/quickstart.rst:390 cf4038d89e1f451eb0cb66829016c94d
msgid "**Case 2**: a package::"
msgstr ""

#: ../../project/docs/quickstart.rst:397 949e7841b7bb4a0a998c86c5785134b3
msgid ""
"For templates you can use the full power of Jinja2 templates.  Head over "
"to the official `Jinja2 Template Documentation "
"<https://jinja.palletsprojects.com/templates/>`_ for more information."
msgstr ""

#: ../../project/docs/quickstart.rst:401 6041f1d659c049859e9e77d76313073e
msgid "Here is an example template:"
msgstr ""

#: ../../project/docs/quickstart.rst:413 39e9998610124e3fbbd0a099673e3427
msgid ""
"Inside templates you also have access to the :data:`~flask.Flask.config`,"
" :class:`~flask.request`, :class:`~flask.session` and :class:`~flask.g` "
"[#]_ objects as well as the :func:`~flask.url_for` and "
":func:`~flask.get_flashed_messages` functions."
msgstr ""

#: ../../project/docs/quickstart.rst:417 54eaa417b0b64e778da620c2f2a41032
msgid ""
"Templates are especially useful if inheritance is used.  If you want to "
"know how that works, see :doc:`patterns/templateinheritance`. Basically "
"template inheritance makes it possible to keep certain elements on each "
"page (like header, navigation and footer)."
msgstr ""

#: ../../project/docs/quickstart.rst:422 6d8dbc88b53c4561b67060e949704958
msgid ""
"Automatic escaping is enabled, so if ``person`` contains HTML it will be "
"escaped automatically.  If you can trust a variable and you know that it "
"will be safe HTML (for example because it came from a module that "
"converts wiki markup to HTML) you can mark it as safe by using the "
":class:`~markupsafe.Markup` class or by using the ``|safe`` filter in the"
" template.  Head over to the Jinja 2 documentation for more examples."
msgstr ""

#: ../../project/docs/quickstart.rst:429 ada69b9b080a4cbdb54f030720af4b9c
msgid ""
"Here is a basic introduction to how the :class:`~markupsafe.Markup` class"
" works::"
msgstr ""

#: ../../project/docs/quickstart.rst:441 75088945204f4d628dae178bd8859566
msgid ""
"Autoescaping is no longer enabled for all templates.  The following "
"extensions for templates trigger autoescaping: ``.html``, ``.htm``, "
"``.xml``, ``.xhtml``.  Templates loaded from a string will have "
"autoescaping disabled."
msgstr ""

#: ../../project/docs/quickstart.rst:446 084b4823ae5a4f3fbfb18984439bc6c9
msgid ""
"Unsure what that :class:`~flask.g` object is? It's something in which you"
" can store information for your own needs. See the documentation for "
":class:`flask.g` and :doc:`patterns/sqlite3`."
msgstr ""

#: ../../project/docs/quickstart.rst:452 c9fb081781fe490a83dcaf8be7557d4d
msgid "Accessing Request Data"
msgstr ""

#: ../../project/docs/quickstart.rst:454 358feb5793c748c590de43585b9d04a0
msgid ""
"For web applications it's crucial to react to the data a client sends to "
"the server.  In Flask this information is provided by the global "
":class:`~flask.request` object.  If you have some experience with Python "
"you might be wondering how that object can be global and how Flask "
"manages to still be threadsafe.  The answer is context locals:"
msgstr ""

#: ../../project/docs/quickstart.rst:464 9b77582917424d869548423e671761f5
msgid "Context Locals"
msgstr ""

#: ../../project/docs/quickstart.rst:466 5320b4c6327e490590c76bdf3b528fdc
msgid "Insider Information"
msgstr ""

#: ../../project/docs/quickstart.rst:468 5e4457f3c2f54051876635f5149c9c72
msgid ""
"If you want to understand how that works and how you can implement tests "
"with context locals, read this section, otherwise just skip it."
msgstr ""

#: ../../project/docs/quickstart.rst:471 6e1283f9569741bdab7e96d8dfd14bab
msgid ""
"Certain objects in Flask are global objects, but not of the usual kind. "
"These objects are actually proxies to objects that are local to a "
"specific context.  What a mouthful.  But that is actually quite easy to "
"understand."
msgstr ""

#: ../../project/docs/quickstart.rst:475 b9b507d3410b42f9a7592feb12031e96
msgid ""
"Imagine the context being the handling thread.  A request comes in and "
"the web server decides to spawn a new thread (or something else, the "
"underlying object is capable of dealing with concurrency systems other "
"than threads).  When Flask starts its internal request handling it "
"figures out that the current thread is the active context and binds the "
"current application and the WSGI environments to that context (thread). "
"It does that in an intelligent way so that one application can invoke "
"another application without breaking."
msgstr ""

#: ../../project/docs/quickstart.rst:484 d56253d6a237477b9b3901c05dd3ef44
msgid ""
"So what does this mean to you?  Basically you can completely ignore that "
"this is the case unless you are doing something like unit testing.  You "
"will notice that code which depends on a request object will suddenly "
"break because there is no request object.  The solution is creating a "
"request object yourself and binding it to the context.  The easiest "
"solution for unit testing is to use the "
":meth:`~flask.Flask.test_request_context` context manager.  In "
"combination with the ``with`` statement it will bind a test request so "
"that you can interact with it.  Here is an example::"
msgstr ""

#: ../../project/docs/quickstart.rst:501 064b412a60c744e08eae3124f71691bf
msgid ""
"The other possibility is passing a whole WSGI environment to the "
":meth:`~flask.Flask.request_context` method::"
msgstr ""

#: ../../project/docs/quickstart.rst:508 47f00f986222487dbc372111507a23fc
msgid "The Request Object"
msgstr ""

#: ../../project/docs/quickstart.rst:510 1102326be78340b7a7c6dc20cbbc83d9
msgid ""
"The request object is documented in the API section and we will not cover"
" it here in detail (see :class:`~flask.Request`). Here is a broad "
"overview of some of the most common operations.  First of all you have to"
" import it from the ``flask`` module::"
msgstr ""

#: ../../project/docs/quickstart.rst:517 7b8bfff6046c43ef8f54d62de8c51528
msgid ""
"The current request method is available by using the "
":attr:`~flask.Request.method` attribute.  To access form data (data "
"transmitted in a ``POST`` or ``PUT`` request) you can use the "
":attr:`~flask.Request.form` attribute.  Here is a full example of the two"
" attributes mentioned above::"
msgstr ""

#: ../../project/docs/quickstart.rst:536 6013c5e9f87845518e7446d368a50e82
msgid ""
"What happens if the key does not exist in the ``form`` attribute?  In "
"that case a special :exc:`KeyError` is raised.  You can catch it like a "
"standard :exc:`KeyError` but if you don't do that, a HTTP 400 Bad Request"
" error page is shown instead.  So for many situations you don't have to "
"deal with that problem."
msgstr ""

#: ../../project/docs/quickstart.rst:542 643318ce914049f4a0f557544ada1b11
msgid ""
"To access parameters submitted in the URL (``?key=value``) you can use "
"the :attr:`~flask.Request.args` attribute::"
msgstr ""

#: ../../project/docs/quickstart.rst:547 5504a43a1fcf4a7d8d9522292baeb9b3
msgid ""
"We recommend accessing URL parameters with `get` or by catching the "
":exc:`KeyError` because users might change the URL and presenting them a "
"400 bad request page in that case is not user friendly."
msgstr ""

#: ../../project/docs/quickstart.rst:551 7207c12c2d744bdcbee6089ed111fc85
msgid ""
"For a full list of methods and attributes of the request object, head "
"over to the :class:`~flask.Request` documentation."
msgstr ""

#: ../../project/docs/quickstart.rst:556 2f8e45f852194235945ae217d6d061aa
msgid "File Uploads"
msgstr ""

#: ../../project/docs/quickstart.rst:558 f5e2ed924b9d469c872e6ae5811dcc5e
msgid ""
"You can handle uploaded files with Flask easily.  Just make sure not to "
"forget to set the ``enctype=\"multipart/form-data\"`` attribute on your "
"HTML form, otherwise the browser will not transmit your files at all."
msgstr ""

#: ../../project/docs/quickstart.rst:562 6ec6b626ad33496dbcfde422fc6f0c9a
msgid ""
"Uploaded files are stored in memory or at a temporary location on the "
"filesystem.  You can access those files by looking at the "
":attr:`~flask.request.files` attribute on the request object.  Each "
"uploaded file is stored in that dictionary.  It behaves just like a "
"standard Python :class:`file` object, but it also has a "
":meth:`~werkzeug.datastructures.FileStorage.save` method that allows you "
"to store that file on the filesystem of the server. Here is a simple "
"example showing how that works::"
msgstr ""

#: ../../project/docs/quickstart.rst:580 9f4a0748bea04aed97864aeb47f30a0e
msgid ""
"If you want to know how the file was named on the client before it was "
"uploaded to your application, you can access the "
":attr:`~werkzeug.datastructures.FileStorage.filename` attribute. However "
"please keep in mind that this value can be forged so never ever trust "
"that value.  If you want to use the filename of the client to store the "
"file on the server, pass it through the "
":func:`~werkzeug.utils.secure_filename` function that Werkzeug provides "
"for you::"
msgstr ""

#: ../../project/docs/quickstart.rst:598 aeadcf5a908d427e9730d01cb8c6f435
msgid "For some better examples, see :doc:`patterns/fileuploads`."
msgstr ""

#: ../../project/docs/quickstart.rst:601 4203df7cc3a641a88ceea94ef83c677a
msgid "Cookies"
msgstr ""

#: ../../project/docs/quickstart.rst:603 561f9fc236e54c9c8068cca7fd34e847
msgid ""
"To access cookies you can use the :attr:`~flask.Request.cookies` "
"attribute.  To set cookies you can use the "
":attr:`~flask.Response.set_cookie` method of response objects.  The "
":attr:`~flask.Request.cookies` attribute of request objects is a "
"dictionary with all the cookies the client transmits.  If you want to use"
" sessions, do not use the cookies directly but instead use the "
":ref:`sessions` in Flask that add some security on top of cookies for "
"you."
msgstr ""

#: ../../project/docs/quickstart.rst:611 ae2f698a08804ce7a6bb7c7457abea84
msgid "Reading cookies::"
msgstr ""

#: ../../project/docs/quickstart.rst:621 13c85b76ae694187b27205eee86f6005
msgid "Storing cookies::"
msgstr ""

#: ../../project/docs/quickstart.rst:631 c68c134f44f7428fa7d22b8d3f2daaa1
msgid ""
"Note that cookies are set on response objects.  Since you normally just "
"return strings from the view functions Flask will convert them into "
"response objects for you.  If you explicitly want to do that you can use "
"the :meth:`~flask.make_response` function and then modify it."
msgstr ""

#: ../../project/docs/quickstart.rst:636 7357520c4ca04ef7af6e0eaac84d8bd7
msgid ""
"Sometimes you might want to set a cookie at a point where the response "
"object does not exist yet.  This is possible by utilizing the "
":doc:`patterns/deferredcallbacks` pattern."
msgstr ""

#: ../../project/docs/quickstart.rst:640 65aef4e23b8648088d3e825932cac560
msgid "For this also see :ref:`about-responses`."
msgstr ""

#: ../../project/docs/quickstart.rst:643 900239962731409da689cac7fefd85a6
msgid "Redirects and Errors"
msgstr ""

#: ../../project/docs/quickstart.rst:645 14070bd0c596437fad855009c5e77eb1
msgid ""
"To redirect a user to another endpoint, use the :func:`~flask.redirect` "
"function; to abort a request early with an error code, use the "
":func:`~flask.abort` function::"
msgstr ""

#: ../../project/docs/quickstart.rst:660 a30026feae9c4fa08da0406f3e7a05ac
msgid ""
"This is a rather pointless example because a user will be redirected from"
" the index to a page they cannot access (401 means access denied) but it "
"shows how that works."
msgstr ""

#: ../../project/docs/quickstart.rst:664 86cbd88a6754454cb51931c4ce854293
msgid ""
"By default a black and white error page is shown for each error code.  If"
" you want to customize the error page, you can use the "
":meth:`~flask.Flask.errorhandler` decorator::"
msgstr ""

#: ../../project/docs/quickstart.rst:674 edd42ac99b204aa59b8b3901d6e4adf0
msgid ""
"Note the ``404`` after the :func:`~flask.render_template` call.  This "
"tells Flask that the status code of that page should be 404 which means "
"not found.  By default 200 is assumed which translates to: all went well."
msgstr ""

#: ../../project/docs/quickstart.rst:678 27e7fbe53df041d7aff8008e09e94e3e
msgid "See :doc:`errorhandling` for more details."
msgstr ""

#: ../../project/docs/quickstart.rst:683 1882d493586849f59523eeb1adee2185
msgid "About Responses"
msgstr ""

#: ../../project/docs/quickstart.rst:685 596ba648a9a64dd4b0a3668159010650
msgid ""
"The return value from a view function is automatically converted into a "
"response object for you. If the return value is a string it's converted "
"into a response object with the string as response body, a ``200 OK`` "
"status code and a :mimetype:`text/html` mimetype. If the return value is "
"a dict or list, :func:`jsonify` is called to produce a response. The "
"logic that Flask applies to converting return values into response "
"objects is as follows:"
msgstr ""

#: ../../project/docs/quickstart.rst:693 2c9f467984134e16a76fdb95e4048c8d
msgid ""
"If a response object of the correct type is returned it's directly "
"returned from the view."
msgstr ""

#: ../../project/docs/quickstart.rst:695 58a6187142da48f49cd0b2751bded845
msgid ""
"If it's a string, a response object is created with that data and the "
"default parameters."
msgstr ""

#: ../../project/docs/quickstart.rst:697 fa638289bcc94a6eb758a5f50da39323
msgid ""
"If it's an iterator or generator returning strings or bytes, it is "
"treated as a streaming response."
msgstr ""

#: ../../project/docs/quickstart.rst:699 29c4c1d71bd8407483d87963627c3744
msgid ""
"If it's a dict or list, a response object is created using "
":func:`~flask.json.jsonify`."
msgstr ""

#: ../../project/docs/quickstart.rst:701 bf39ae965d7c468bbfbe751b7384420f
msgid ""
"If a tuple is returned the items in the tuple can provide extra "
"information. Such tuples have to be in the form ``(response, status)``, "
"``(response, headers)``, or ``(response, status, headers)``. The "
"``status`` value will override the status code and ``headers`` can be a "
"list or dictionary of additional header values."
msgstr ""

#: ../../project/docs/quickstart.rst:707 0d26ad448b114bd29792d29fc92bdc1a
msgid ""
"If none of that works, Flask will assume the return value is a valid WSGI"
" application and convert that into a response object."
msgstr ""

#: ../../project/docs/quickstart.rst:710 62f41f823ec744d5bb06ba244a6003c7
msgid ""
"If you want to get hold of the resulting response object inside the view "
"you can use the :func:`~flask.make_response` function."
msgstr ""

#: ../../project/docs/quickstart.rst:713 e4d2a3787e0249f09281336d10a5da00
msgid "Imagine you have a view like this::"
msgstr ""

#: ../../project/docs/quickstart.rst:721 aed13e5240f24633afad39f632857129
msgid ""
"You just need to wrap the return expression with "
":func:`~flask.make_response` and get the response object to modify it, "
"then return it::"
msgstr ""

#: ../../project/docs/quickstart.rst:735 c4149ece0c044e609f2b778cfbae5a51
msgid "APIs with JSON"
msgstr ""

#: ../../project/docs/quickstart.rst:737 7e9e80dac42e44b9ad391153956ce08f
msgid ""
"A common response format when writing an API is JSON. It's easy to get "
"started writing such an API with Flask. If you return a ``dict`` or "
"``list`` from a view, it will be converted to a JSON response."
msgstr ""

#: ../../project/docs/quickstart.rst:757 9171c64ce29b4a538711a592d7022219
msgid ""
"This is a shortcut to passing the data to the :func:`~flask.json.jsonify`"
" function, which will serialize any supported JSON data type. That means "
"that all the data in the dict or list must be JSON serializable."
msgstr ""

#: ../../project/docs/quickstart.rst:762 4d735a16c9d740d6b82148252c1f7f95
msgid ""
"For complex types such as database models, you'll want to use a "
"serialization library to convert the data to valid JSON types first. "
"There are many serialization libraries and Flask API extensions "
"maintained by the community that support more complex applications."
msgstr ""

#: ../../project/docs/quickstart.rst:771 4f50a2e48371416c89703f4178280bfb
msgid "Sessions"
msgstr ""

#: ../../project/docs/quickstart.rst:773 9d545cb4c35d4d459ffbab9839b2b375
msgid ""
"In addition to the request object there is also a second object called "
":class:`~flask.session` which allows you to store information specific to"
" a user from one request to the next.  This is implemented on top of "
"cookies for you and signs the cookies cryptographically.  What this means"
" is that the user could look at the contents of your cookie but not "
"modify it, unless they know the secret key used for signing."
msgstr ""

#: ../../project/docs/quickstart.rst:780 3255b31bc3e94fb1aca09e01bbd8af6e
msgid ""
"In order to use sessions you have to set a secret key.  Here is how "
"sessions work::"
msgstr ""

#: ../../project/docs/quickstart.rst:812 8ebc9807d96e43718d33c811b88ab638
msgid "How to generate good secret keys"
msgstr ""

#: ../../project/docs/quickstart.rst:814 f3afd8a65fe3427f82e03b34d4fb3d18
msgid ""
"A secret key should be as random as possible. Your operating system has "
"ways to generate pretty random data based on a cryptographic random "
"generator. Use the following command to quickly generate a value for "
":attr:`Flask.secret_key` (or :data:`SECRET_KEY`)::"
msgstr ""

#: ../../project/docs/quickstart.rst:822 c25f257f72ac4bb196af49632d0748a6
msgid ""
"A note on cookie-based sessions: Flask will take the values you put into "
"the session object and serialize them into a cookie.  If you are finding "
"some values do not persist across requests, cookies are indeed enabled, "
"and you are not getting a clear error message, check the size of the "
"cookie in your page responses compared to the size supported by web "
"browsers."
msgstr ""

#: ../../project/docs/quickstart.rst:828 066e85986c1143e3a9c05db8d3dcfd5e
msgid ""
"Besides the default client-side based sessions, if you want to handle "
"sessions on the server-side instead, there are several Flask extensions "
"that support this."
msgstr ""

#: ../../project/docs/quickstart.rst:833 772479203dc7413ea182de7a26debed6
msgid "Message Flashing"
msgstr ""

#: ../../project/docs/quickstart.rst:835 71c9dd0b969745c58235da85c6d13f8d
msgid ""
"Good applications and user interfaces are all about feedback.  If the "
"user does not get enough feedback they will probably end up hating the "
"application.  Flask provides a really simple way to give feedback to a "
"user with the flashing system.  The flashing system basically makes it "
"possible to record a message at the end of a request and access it on the"
" next (and only the next) request.  This is usually combined with a "
"layout template to expose the message."
msgstr ""

#: ../../project/docs/quickstart.rst:843 cf3f3c1119044837b4e599c0a0f20493
msgid ""
"To flash a message use the :func:`~flask.flash` method, to get hold of "
"the messages you can use :func:`~flask.get_flashed_messages` which is "
"also available in the templates. See :doc:`patterns/flashing` for a full "
"example."
msgstr ""

#: ../../project/docs/quickstart.rst:849 ea5dad8560974fe98185bd8af8ea4f5b
msgid "Logging"
msgstr ""

#: ../../project/docs/quickstart.rst:853 ecae835344c344a58d6a0433ff0c7e9e
msgid ""
"Sometimes you might be in a situation where you deal with data that "
"should be correct, but actually is not.  For example you may have some "
"client-side code that sends an HTTP request to the server but it's "
"obviously malformed.  This might be caused by a user tampering with the "
"data, or the client code failing.  Most of the time it's okay to reply "
"with ``400 Bad Request`` in that situation, but sometimes that won't do "
"and the code has to continue working."
msgstr ""

#: ../../project/docs/quickstart.rst:861 b24e3b0bb52d40cda76bc641149df232
msgid ""
"You may still want to log that something fishy happened.  This is where "
"loggers come in handy.  As of Flask 0.3 a logger is preconfigured for you"
" to use."
msgstr ""

#: ../../project/docs/quickstart.rst:865 9cdf2178e8a04bcf84515522291e4a51
msgid "Here are some example log calls::"
msgstr ""

#: ../../project/docs/quickstart.rst:871 a35f4692e1be42539c3e7ab6109741b8
msgid ""
"The attached :attr:`~flask.Flask.logger` is a standard logging "
":class:`~logging.Logger`, so head over to the official :mod:`logging` "
"docs for more information."
msgstr ""

#: ../../project/docs/quickstart.rst:875 1d9877fe417d4c9db821a67915cfc751
msgid "See :doc:`errorhandling`."
msgstr ""

#: ../../project/docs/quickstart.rst:879 094d60d91d974ba79355fb13c7b9cfc7
msgid "Hooking in WSGI Middleware"
msgstr ""

#: ../../project/docs/quickstart.rst:881 79c3a49435e343bbb74f589099845536
msgid ""
"To add WSGI middleware to your Flask application, wrap the application's "
"``wsgi_app`` attribute. For example, to apply Werkzeug's "
":class:`~werkzeug.middleware.proxy_fix.ProxyFix` middleware for running "
"behind Nginx:"
msgstr ""

#: ../../project/docs/quickstart.rst:891 93696bcd9bfc43ce92bd572a05c27b71
msgid ""
"Wrapping ``app.wsgi_app`` instead of ``app`` means that ``app`` still "
"points at your Flask application, not at the middleware, so you can "
"continue to use and configure ``app`` directly."
msgstr ""

#: ../../project/docs/quickstart.rst:896 5d27055db2834af8b78def315a569849
msgid "Using Flask Extensions"
msgstr ""

#: ../../project/docs/quickstart.rst:898 8f76cfde967043b49472ed98114718ce
msgid ""
"Extensions are packages that help you accomplish common tasks. For "
"example, Flask-SQLAlchemy provides SQLAlchemy support that makes it "
"simple and easy to use with Flask."
msgstr ""

#: ../../project/docs/quickstart.rst:902 64f20461409f4128ad443b3fb22a4342
msgid "For more on Flask extensions, see :doc:`extensions`."
msgstr ""

#: ../../project/docs/quickstart.rst:905 fbc9c1223fd9453fa25239d351bff730
msgid "Deploying to a Web Server"
msgstr ""

#: ../../project/docs/quickstart.rst:907 d8c7e5b2239f4e37ba38ef491e742e42
msgid "Ready to deploy your new Flask app? See :doc:`deploying/index`."
msgstr ""

#~ msgid ""
#~ "Automatic escaping is enabled, so if "
#~ "``name`` contains HTML it will be "
#~ "escaped automatically.  If you can trust"
#~ " a variable and you know that "
#~ "it will be safe HTML (for example"
#~ " because it came from a module "
#~ "that converts wiki markup to HTML) "
#~ "you can mark it as safe by "
#~ "using the :class:`~markupsafe.Markup` class or"
#~ " by using the ``|safe`` filter in "
#~ "the template.  Head over to the "
#~ "Jinja 2 documentation for more examples."
#~ msgstr ""

