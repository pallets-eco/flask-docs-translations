# SOME DESCRIPTIVE TITLE.
# Copyright (C) 2010 Pallets
# This file is distributed under the same license as the Flask package.
# FIRST AUTHOR <EMAIL@ADDRESS>, YEAR.
#
#, fuzzy
msgid ""
msgstr ""
"Project-Id-Version: Flask 3.1.x\n"
"Report-Msgid-Bugs-To: \n"
"POT-Creation-Date: 2024-11-20 19:31-0800\n"
"PO-Revision-Date: YEAR-MO-DA HO:MI+ZONE\n"
"Last-Translator: FULL NAME <EMAIL@ADDRESS>\n"
"Language-Team: LANGUAGE <LL@li.org>\n"
"MIME-Version: 1.0\n"
"Content-Type: text/plain; charset=UTF-8\n"
"Content-Transfer-Encoding: 8bit\n"

#: ../../project/docs/tutorial/views.rst:4
#: 531740e3aafd41cf99450ca5b62d590c
msgid "Blueprints and Views"
msgstr ""

#: ../../project/docs/tutorial/views.rst:6
#: 95b2c9dcd9864a9fac410cf19f6b284e
msgid "A view function is the code you write to respond to requests to your application. Flask uses patterns to match the incoming request URL to the view that should handle it. The view returns data that Flask turns into an outgoing response. Flask can also go the other direction and generate a URL to a view based on its name and arguments."
msgstr ""

#: ../../project/docs/tutorial/views.rst:14
#: 2e143637c9574c9bb56393185354aa21
msgid "Create a Blueprint"
msgstr ""

#: ../../project/docs/tutorial/views.rst:16
#: a701964d413b49a38441f6877aa0a846
msgid "A :class:`Blueprint` is a way to organize a group of related views and other code. Rather than registering views and other code directly with an application, they are registered with a blueprint. Then the blueprint is registered with the application when it is available in the factory function."
msgstr ""

#: ../../project/docs/tutorial/views.rst:22
#: a5fa25052e0842998866a1f950e7f106
msgid "Flaskr will have two blueprints, one for authentication functions and one for the blog posts functions. The code for each blueprint will go in a separate module. Since the blog needs to know about authentication, you'll write the authentication one first."
msgstr ""

#: ../../project/docs/tutorial/views.rst:27
#: ../../project/docs/tutorial/views.rst:79
#: ../../project/docs/tutorial/views.rst:170
#: ../../project/docs/tutorial/views.rst:222
#: ../../project/docs/tutorial/views.rst:251
#: ../../project/docs/tutorial/views.rst:267
#: fb24b4d99ed24f40ac149744cd8830ef
#: 5ac20da4e9ee463e8db0e38ce2556c7a
#: dd9fa01fe47c49a6b5b9d8509c6e2a9f
#: 16426e7c74554392a637948218e01608
#: 3cd93a0595294852b1508694e74ad23d
#: 48715463bd2840528a4d4dcc7a93f2c7
msgid "``flaskr/auth.py``"
msgstr ""

#: ../../project/docs/tutorial/views.rst:41
#: e3a82a7500764751a88a5b95a613f845
msgid "This creates a :class:`Blueprint` named ``'auth'``. Like the application object, the blueprint needs to know where it's defined, so ``__name__`` is passed as the second argument. The ``url_prefix`` will be prepended to all the URLs associated with the blueprint."
msgstr ""

#: ../../project/docs/tutorial/views.rst:46
#: d7f8d827f00d41f796baae8fc10aeb57
msgid "Import and register the blueprint from the factory using :meth:`app.register_blueprint() <Flask.register_blueprint>`. Place the new code at the end of the factory function before returning the app."
msgstr ""

#: ../../project/docs/tutorial/views.rst:50
#: 423dbf33626641108b130cf931919c82
msgid "``flaskr/__init__.py``"
msgstr ""

#: ../../project/docs/tutorial/views.rst:62
#: d028c7e6fbe9473ab42edb95c580318d
msgid "The authentication blueprint will have views to register new users and to log in and log out."
msgstr ""

#: ../../project/docs/tutorial/views.rst:67
#: ab692cefae6646939ff7efc2fa6972c4
msgid "The First View: Register"
msgstr ""

#: ../../project/docs/tutorial/views.rst:69
#: 059b39e4b4304c1ca00375580ef4f5fb
msgid "When the user visits the ``/auth/register`` URL, the ``register`` view will return `HTML`_ with a form for them to fill out. When they submit the form, it will validate their input and either show the form again with an error message or create the new user and go to the login page."
msgstr ""

#: ../../project/docs/tutorial/views.rst:76
#: 1a90dd019d40413f8f171e36914272ec
msgid "For now you will just write the view code. On the next page, you'll write templates to generate the HTML form."
msgstr ""

#: ../../project/docs/tutorial/views.rst:111
#: 660f8513ccc54da3b114876ecf3e3ae7
msgid "Here's what the ``register`` view function is doing:"
msgstr ""

#: ../../project/docs/tutorial/views.rst:113
#: 73bae5e784c741adb21a6827562e70d7
msgid ":meth:`@bp.route <Blueprint.route>` associates the URL ``/register`` with the ``register`` view function. When Flask receives a request to ``/auth/register``, it will call the ``register`` view and use the return value as the response."
msgstr ""

#: ../../project/docs/tutorial/views.rst:118
#: 023e3f08600b48bba6a02d20c8487419
msgid "If the user submitted the form, :attr:`request.method <Request.method>` will be ``'POST'``. In this case, start validating the input."
msgstr ""

#: ../../project/docs/tutorial/views.rst:122
#: 1cc445860a104b8c9e2522add70816b8
msgid ":attr:`request.form <Request.form>` is a special type of :class:`dict` mapping submitted form keys and values. The user will input their ``username`` and ``password``."
msgstr ""

#: ../../project/docs/tutorial/views.rst:126
#: aff7b9906b904dd780f3b7834abe1f14
msgid "Validate that ``username`` and ``password`` are not empty."
msgstr ""

#: ../../project/docs/tutorial/views.rst:128
#: 43379b8f05834bafabbf1411af71e199
msgid "If validation succeeds, insert the new user data into the database."
msgstr ""

#: ../../project/docs/tutorial/views.rst:130
#: eeec13037088406eaf8dabddadaee809
msgid ":meth:`db.execute <sqlite3.Connection.execute>` takes a SQL query with ``?`` placeholders for any user input, and a tuple of values to replace the placeholders with. The database library will take care of escaping the values so you are not vulnerable to a *SQL injection attack*."
msgstr ""

#: ../../project/docs/tutorial/views.rst:136
#: 754e809ffd6f44719e117c38db4cd719
msgid "For security, passwords should never be stored in the database directly. Instead, :func:`~werkzeug.security.generate_password_hash` is used to securely hash the password, and that hash is stored. Since this query modifies data, :meth:`db.commit() <sqlite3.Connection.commit>` needs to be called afterwards to save the changes."
msgstr ""

#: ../../project/docs/tutorial/views.rst:144
#: fa4443e01cbc4f0d94af9dcde442e785
msgid "An :exc:`sqlite3.IntegrityError` will occur if the username already exists, which should be shown to the user as another validation error."
msgstr ""

#: ../../project/docs/tutorial/views.rst:148
#: e9d97be6655d468dab3591171ad2751a
msgid "After storing the user, they are redirected to the login page. :func:`url_for` generates the URL for the login view based on its name. This is preferable to writing the URL directly as it allows you to change the URL later without changing all code that links to it. :func:`redirect` generates a redirect response to the generated URL."
msgstr ""

#: ../../project/docs/tutorial/views.rst:155
#: d15af764d79f4c1bbc68ea86313a1b94
msgid "If validation fails, the error is shown to the user. :func:`flash` stores messages that can be retrieved when rendering the template."
msgstr ""

#: ../../project/docs/tutorial/views.rst:158
#: 799c160b6e11491ab53c99f8bdb1f273
msgid "When the user initially navigates to ``auth/register``, or there was a validation error, an HTML page with the registration form should be shown. :func:`render_template` will render a template containing the HTML, which you'll write in the next step of the tutorial."
msgstr ""

#: ../../project/docs/tutorial/views.rst:166
#: 6ba335315771482d93d529493d6fde4f
msgid "Login"
msgstr ""

#: ../../project/docs/tutorial/views.rst:168
#: be7913a069f349e4babb35d3d09bffa2
msgid "This view follows the same pattern as the ``register`` view above."
msgstr ""

#: ../../project/docs/tutorial/views.rst:198
#: 66e7cf4f97af4b409d7c1b3ed2b8e296
msgid "There are a few differences from the ``register`` view:"
msgstr ""

#: ../../project/docs/tutorial/views.rst:200
#: 2a2e718a476e42509f9202e1c66dd29f
msgid "The user is queried first and stored in a variable for later use."
msgstr ""

#: ../../project/docs/tutorial/views.rst:202
#: fb1e0dc21cc04e13b3ec3bc4848c561d
msgid ":meth:`~sqlite3.Cursor.fetchone` returns one row from the query. If the query returned no results, it returns ``None``. Later, :meth:`~sqlite3.Cursor.fetchall` will be used, which returns a list of all results."
msgstr ""

#: ../../project/docs/tutorial/views.rst:207
#: 891f51f7cc834eea8746a22e19657aff
msgid ":func:`~werkzeug.security.check_password_hash` hashes the submitted password in the same way as the stored hash and securely compares them. If they match, the password is valid."
msgstr ""

#: ../../project/docs/tutorial/views.rst:211
#: e21743e276f7404ca77ab29f08e9d077
msgid ":data:`session` is a :class:`dict` that stores data across requests. When validation succeeds, the user's ``id`` is stored in a new session. The data is stored in a *cookie* that is sent to the browser, and the browser then sends it back with subsequent requests. Flask securely *signs* the data so that it can't be tampered with."
msgstr ""

#: ../../project/docs/tutorial/views.rst:217
#: 149ba692c3cb41089c00b776dba96649
msgid "Now that the user's ``id`` is stored in the :data:`session`, it will be available on subsequent requests. At the beginning of each request, if a user is logged in their information should be loaded and made available to other views."
msgstr ""

#: ../../project/docs/tutorial/views.rst:236
#: 69f68b2fd28848e5849bd107c11da80c
msgid ":meth:`bp.before_app_request() <Blueprint.before_app_request>` registers a function that runs before the view function, no matter what URL is requested. ``load_logged_in_user`` checks if a user id is stored in the :data:`session` and gets that user's data from the database, storing it on :data:`g.user <g>`, which lasts for the length of the request. If there is no user id, or if the id doesn't exist, ``g.user`` will be ``None``."
msgstr ""

#: ../../project/docs/tutorial/views.rst:246
#: 9fe78aab7b794a09ab4a327f31f4d8cb
msgid "Logout"
msgstr ""

#: ../../project/docs/tutorial/views.rst:248
#: 21bb0b562bc3483194bb03a954e3f4b9
msgid "To log out, you need to remove the user id from the :data:`session`. Then ``load_logged_in_user`` won't load a user on subsequent requests."
msgstr ""

#: ../../project/docs/tutorial/views.rst:261
#: 25c3a5139bb14ef08ea3622ad667bf7d
msgid "Require Authentication in Other Views"
msgstr ""

#: ../../project/docs/tutorial/views.rst:263
#: e73fe2fef50a4cfea890e00620bd6967
msgid "Creating, editing, and deleting blog posts will require a user to be logged in. A *decorator* can be used to check this for each view it's applied to."
msgstr ""

#: ../../project/docs/tutorial/views.rst:280
#: 49e899fb5deb4b7197020a56c72bbd6f
msgid "This decorator returns a new view function that wraps the original view it's applied to. The new function checks if a user is loaded and redirects to the login page otherwise. If a user is loaded the original view is called and continues normally. You'll use this decorator when writing the blog views."
msgstr ""

#: ../../project/docs/tutorial/views.rst:287
#: 1ab8454097ae4508b0d20404314eecc5
msgid "Endpoints and URLs"
msgstr ""

#: ../../project/docs/tutorial/views.rst:289
#: 9721e96547024d09961f9950d87f0f65
msgid "The :func:`url_for` function generates the URL to a view based on a name and arguments. The name associated with a view is also called the *endpoint*, and by default it's the same as the name of the view function."
msgstr ""

#: ../../project/docs/tutorial/views.rst:294
#: b45be85599bd4c4e893c40b8f8111d95
msgid "For example, the ``hello()`` view that was added to the app factory earlier in the tutorial has the name ``'hello'`` and can be linked to with ``url_for('hello')``. If it took an argument, which you'll see later, it would be linked to using ``url_for('hello', who='World')``."
msgstr ""

#: ../../project/docs/tutorial/views.rst:300
#: d3091a54b9424a05b4be7761a762db42
msgid "When using a blueprint, the name of the blueprint is prepended to the name of the function, so the endpoint for the ``login`` function you wrote above is ``'auth.login'`` because you added it to the ``'auth'`` blueprint."
msgstr ""

#: ../../project/docs/tutorial/views.rst:305
#: ee26c9f2e425415abd9d54e8fcb330c2
msgid "Continue to :doc:`templates`."
msgstr ""
