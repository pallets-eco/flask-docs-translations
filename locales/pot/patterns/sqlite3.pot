# SOME DESCRIPTIVE TITLE.
# Copyright (C) 2010 Pallets
# This file is distributed under the same license as the Flask package.
# FIRST AUTHOR <EMAIL@ADDRESS>, YEAR.
#
#, fuzzy
msgid ""
msgstr ""
"Project-Id-Version: Flask 3.1.x\n"
"Report-Msgid-Bugs-To: \n"
"POT-Creation-Date: 2024-11-20 19:31-0800\n"
"PO-Revision-Date: YEAR-MO-DA HO:MI+ZONE\n"
"Last-Translator: FULL NAME <EMAIL@ADDRESS>\n"
"Language-Team: LANGUAGE <LL@li.org>\n"
"MIME-Version: 1.0\n"
"Content-Type: text/plain; charset=UTF-8\n"
"Content-Transfer-Encoding: 8bit\n"

#: ../../project/docs/patterns/sqlite3.rst:2
#: a74bb7c9574548c3a992b3e1deac9a77
msgid "Using SQLite 3 with Flask"
msgstr ""

#: ../../project/docs/patterns/sqlite3.rst:4
#: 2fc662d56cf1462580ba635e287a9cbe
msgid "In Flask you can easily implement the opening of database connections on demand and closing them when the context dies (usually at the end of the request)."
msgstr ""

#: ../../project/docs/patterns/sqlite3.rst:8
#: 0862bfa5aa1142368b1b728597a63d76
msgid "Here is a simple example of how you can use SQLite 3 with Flask::"
msgstr ""

#: ../../project/docs/patterns/sqlite3.rst:27
#: 5007304044c849e3a422374d6a324f26
msgid "Now, to use the database, the application must either have an active application context (which is always true if there is a request in flight) or create an application context itself.  At that point the ``get_db`` function can be used to get the current database connection.  Whenever the context is destroyed the database connection will be terminated."
msgstr ""

#: ../../project/docs/patterns/sqlite3.rst:33
#: b9e0884978674ee2a8cd61decce618d3
msgid "Example::"
msgstr ""

#: ../../project/docs/patterns/sqlite3.rst:43
#: 91a6649b073c4585807850a79e0ea863
msgid "Please keep in mind that the teardown request and appcontext functions are always executed, even if a before-request handler failed or was never executed.  Because of this we have to make sure here that the database is there before we close it."
msgstr ""

#: ../../project/docs/patterns/sqlite3.rst:49
#: b61b596fec1f42dfa1a1be97ed71a274
msgid "Connect on Demand"
msgstr ""

#: ../../project/docs/patterns/sqlite3.rst:51
#: 710fb66341ec4f15959288fe5dc54ed7
msgid "The upside of this approach (connecting on first use) is that this will only open the connection if truly necessary.  If you want to use this code outside a request context you can use it in a Python shell by opening the application context by hand::"
msgstr ""

#: ../../project/docs/patterns/sqlite3.rst:61
#: 99fff216fac64e2da5ae972d1fd356b9
msgid "Easy Querying"
msgstr ""

#: ../../project/docs/patterns/sqlite3.rst:63
#: 67b1cc6cbcad401f85903068117d1fd2
msgid "Now in each request handling function you can access `get_db()` to get the current open database connection.  To simplify working with SQLite, a row factory function is useful.  It is executed for every result returned from the database to convert the result.  For instance, in order to get dictionaries instead of tuples, this could be inserted into the ``get_db`` function we created above::"
msgstr ""

#: ../../project/docs/patterns/sqlite3.rst:76
#: d63f7e7a91354908bb0c95527adf625f
msgid "This will make the sqlite3 module return dicts for this database connection, which are much nicer to deal with. Even more simply, we could place this in ``get_db`` instead::"
msgstr ""

#: ../../project/docs/patterns/sqlite3.rst:80
#: 4afb96c758c246ef90ffdc2409452209
msgid "This would use Row objects rather than dicts to return the results of queries. These are ``namedtuple`` s, so we can access them either by index or by key. For example, assuming we have a ``sqlite3.Row`` called ``r`` for the rows ``id``, ``FirstName``, ``LastName``, and ``MiddleInitial``::"
msgstr ""

#: ../../project/docs/patterns/sqlite3.rst:96
#: e30c736977df4baf966e658092caf80b
msgid "Additionally, it is a good idea to provide a query function that combines getting the cursor, executing and fetching the results::"
msgstr ""

#: ../../project/docs/patterns/sqlite3.rst:105
#: 5e9e01109e20492eabce20837735b8d9
msgid "This handy little function, in combination with a row factory, makes working with the database much more pleasant than it is by just using the raw cursor and connection objects."
msgstr ""

#: ../../project/docs/patterns/sqlite3.rst:109
#: e81a6fd0895c4afba96e6b3c86ed749b
msgid "Here is how you can use it::"
msgstr ""

#: ../../project/docs/patterns/sqlite3.rst:114
#: a4623df6bf684ee3ad41fcbc691faf8d
msgid "Or if you just want a single result::"
msgstr ""

#: ../../project/docs/patterns/sqlite3.rst:123
#: 6ceab59d75584cbb9309d9e5add986db
msgid "To pass variable parts to the SQL statement, use a question mark in the statement and pass in the arguments as a list.  Never directly add them to the SQL statement with string formatting because this makes it possible to attack the application using `SQL Injections <https://en.wikipedia.org/wiki/SQL_injection>`_."
msgstr ""

#: ../../project/docs/patterns/sqlite3.rst:130
#: d24bf13018b546ddac32d2730d25c742
msgid "Initial Schemas"
msgstr ""

#: ../../project/docs/patterns/sqlite3.rst:132
#: 2b5e90053cb54a4fafb647c74615110b
msgid "Relational databases need schemas, so applications often ship a `schema.sql` file that creates the database.  It's a good idea to provide a function that creates the database based on that schema.  This function can do that for you::"
msgstr ""

#: ../../project/docs/patterns/sqlite3.rst:144
#: d2c6d41bc0cd412887e386a32bfeb6bb
msgid "You can then create such a database from the Python shell:"
msgstr ""
