# SOME DESCRIPTIVE TITLE.
# Copyright (C) 2010 Pallets
# This file is distributed under the same license as the Flask package.
# FIRST AUTHOR <EMAIL@ADDRESS>, YEAR.
#
#, fuzzy
msgid ""
msgstr ""
"Project-Id-Version: Flask 3.1.x\n"
"Report-Msgid-Bugs-To: \n"
"POT-Creation-Date: 2024-11-20 19:31-0800\n"
"PO-Revision-Date: YEAR-MO-DA HO:MI+ZONE\n"
"Last-Translator: FULL NAME <EMAIL@ADDRESS>\n"
"Language-Team: LANGUAGE <LL@li.org>\n"
"MIME-Version: 1.0\n"
"Content-Type: text/plain; charset=UTF-8\n"
"Content-Transfer-Encoding: 8bit\n"

#: ../../project/docs/patterns/packages.rst:2
#: 8d719a6b7bbe4dd090579d8510c50499
msgid "Large Applications as Packages"
msgstr ""

#: ../../project/docs/patterns/packages.rst:4
#: c989feeacfe04b29a10d4d994f0bbfdd
msgid "Imagine a simple flask application structure that looks like this::"
msgstr ""

#: ../../project/docs/patterns/packages.rst:16
#: db34dc2f2b0a4c4c8e96c90998d8b616
msgid "While this is fine for small applications, for larger applications it's a good idea to use a package instead of a module. The :doc:`/tutorial/index` is structured to use the package pattern, see the :gh:`example code <examples/tutorial>`."
msgstr ""

#: ../../project/docs/patterns/packages.rst:22
#: 518cf99cef8644739d3b38238f100f2a
msgid "Simple Packages"
msgstr ""

#: ../../project/docs/patterns/packages.rst:24
#: e7279c7c7e53466893cf70d0d41fa6ad
msgid "To convert that into a larger one, just create a new folder :file:`yourapplication` inside the existing one and move everything below it. Then rename :file:`yourapplication.py` to :file:`__init__.py`.  (Make sure to delete all ``.pyc`` files first, otherwise things would most likely break)"
msgstr ""

#: ../../project/docs/patterns/packages.rst:29
#: ../../project/docs/patterns/packages.rst:101
#: 2632f3059339475ca677d4ccda39ac93
#: 0dc08173cc2a4aa89a73e9bf72865904
msgid "You should then end up with something like that::"
msgstr ""

#: ../../project/docs/patterns/packages.rst:42
#: 7a00ee18d14a4a678e59ceec405254f7
msgid "But how do you run your application now?  The naive ``python yourapplication/__init__.py`` will not work.  Let's just say that Python does not want modules in packages to be the startup file.  But that is not a big problem, just add a new file called :file:`pyproject.toml` next to the inner :file:`yourapplication` folder with the following contents:"
msgstr ""

#: ../../project/docs/patterns/packages.rst:60
#: 76888da3afe142f59cb96fdf80503b97
msgid "Install your application so it is importable:"
msgstr ""

#: ../../project/docs/patterns/packages.rst:66
#: 128e49141b554732817e7db2fa53d6ed
msgid "To use the ``flask`` command and run your application you need to set the ``--app`` option that tells Flask where to find the application instance:"
msgstr ""

#: ../../project/docs/patterns/packages.rst:74
#: ca9b945e36ac4a17bb6c41db9b8e77d4
msgid "What did we gain from this?  Now we can restructure the application a bit into multiple modules.  The only thing you have to remember is the following quick checklist:"
msgstr ""

#: ../../project/docs/patterns/packages.rst:78
#: a13e4e703b764c3b9b63e290995ce92f
msgid "the `Flask` application object creation has to be in the :file:`__init__.py` file.  That way each module can import it safely and the `__name__` variable will resolve to the correct package."
msgstr ""

#: ../../project/docs/patterns/packages.rst:81
#: 20edda21f6504486b0712a8f41d725a7
msgid "all the view functions (the ones with a :meth:`~flask.Flask.route` decorator on top) have to be imported in the :file:`__init__.py` file. Not the object itself, but the module it is in. Import the view module **after the application object is created**."
msgstr ""

#: ../../project/docs/patterns/packages.rst:86
#: a2ed3634a1be443c829135faf2856621
msgid "Here's an example :file:`__init__.py`::"
msgstr ""

#: ../../project/docs/patterns/packages.rst:93
#: 5500457d4d84412ca235fda5abcd0017
msgid "And this is what :file:`views.py` would look like::"
msgstr ""

#: ../../project/docs/patterns/packages.rst:116
#: bfe531686a7d448dbc88d0daf0a81356
msgid "Circular Imports"
msgstr ""

#: ../../project/docs/patterns/packages.rst:118
#: 9271d482d63249e88df8ff9220204a5a
msgid "Every Python programmer hates them, and yet we just added some: circular imports (That's when two modules depend on each other.  In this case :file:`views.py` depends on :file:`__init__.py`).  Be advised that this is a bad idea in general but here it is actually fine.  The reason for this is that we are not actually using the views in :file:`__init__.py` and just ensuring the module is imported and we are doing that at the bottom of the file."
msgstr ""

#: ../../project/docs/patterns/packages.rst:128
#: 7fee5afdde9e4686b32a0553da084507
msgid "Working with Blueprints"
msgstr ""

#: ../../project/docs/patterns/packages.rst:130
#: f8d8e163fc7f4d78b46a7f8e402cc7eb
msgid "If you have larger applications it's recommended to divide them into smaller groups where each group is implemented with the help of a blueprint.  For a gentle introduction into this topic refer to the :doc:`/blueprints` chapter of the documentation."
msgstr ""
