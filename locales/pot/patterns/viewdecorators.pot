# SOME DESCRIPTIVE TITLE.
# Copyright (C) 2010 Pallets
# This file is distributed under the same license as the Flask package.
# FIRST AUTHOR <EMAIL@ADDRESS>, YEAR.
#
#, fuzzy
msgid ""
msgstr ""
"Project-Id-Version: Flask 3.1.x\n"
"Report-Msgid-Bugs-To: \n"
"POT-Creation-Date: 2024-11-20 19:31-0800\n"
"PO-Revision-Date: YEAR-MO-DA HO:MI+ZONE\n"
"Last-Translator: FULL NAME <EMAIL@ADDRESS>\n"
"Language-Team: LANGUAGE <LL@li.org>\n"
"MIME-Version: 1.0\n"
"Content-Type: text/plain; charset=UTF-8\n"
"Content-Transfer-Encoding: 8bit\n"

#: ../../project/docs/patterns/viewdecorators.rst:2
#: 75fa6d2db6cb428e9100addb55bb2ca3
msgid "View Decorators"
msgstr ""

#: ../../project/docs/patterns/viewdecorators.rst:4
#: 93edf3f1873a4648b82390cd63f651d3
msgid "Python has a really interesting feature called function decorators.  This allows some really neat things for web applications.  Because each view in Flask is a function, decorators can be used to inject additional functionality to one or more functions.  The :meth:`~flask.Flask.route` decorator is the one you probably used already.  But there are use cases for implementing your own decorator.  For instance, imagine you have a view that should only be used by people that are logged in.  If a user goes to the site and is not logged in, they should be redirected to the login page.  This is a good example of a use case where a decorator is an excellent solution."
msgstr ""

#: ../../project/docs/patterns/viewdecorators.rst:16
#: 23e6b691b2a44e16a2eab5b16dd3c8d4
msgid "Login Required Decorator"
msgstr ""

#: ../../project/docs/patterns/viewdecorators.rst:18
#: 6842cf9e209742009b0ba2854a118da9
msgid "So let's implement such a decorator.  A decorator is a function that wraps and replaces another function.  Since the original function is replaced, you need to remember to copy the original function's information to the new function.  Use :func:`functools.wraps` to handle this for you."
msgstr ""

#: ../../project/docs/patterns/viewdecorators.rst:23
#: 291cc5fe66da4caa915826ebfb4f5371
msgid "This example assumes that the login page is called ``'login'`` and that the current user is stored in ``g.user`` and is ``None`` if there is no-one logged in. ::"
msgstr ""

#: ../../project/docs/patterns/viewdecorators.rst:38
#: aefa9eb05dad4310b12b71631620d6ac
msgid "To use the decorator, apply it as innermost decorator to a view function. When applying further decorators, always remember that the :meth:`~flask.Flask.route` decorator is the outermost. ::"
msgstr ""

#: ../../project/docs/patterns/viewdecorators.rst:48
#: 30a442a0cf4d4118b9ce92f02c59a018
msgid "The ``next`` value will exist in ``request.args`` after a ``GET`` request for the login page.  You'll have to pass it along when sending the ``POST`` request from the login form.  You can do this with a hidden input tag, then retrieve it from ``request.form`` when logging the user in. ::"
msgstr ""

#: ../../project/docs/patterns/viewdecorators.rst:57
#: 636d02c03ace407997d027f62351efc9
msgid "Caching Decorator"
msgstr ""

#: ../../project/docs/patterns/viewdecorators.rst:59
#: febdb166e0f5493ab0f8ee4f4fda6610
msgid "Imagine you have a view function that does an expensive calculation and because of that you would like to cache the generated results for a certain amount of time.  A decorator would be nice for that.  We're assuming you have set up a cache like mentioned in :doc:`caching`."
msgstr ""

#: ../../project/docs/patterns/viewdecorators.rst:64
#: cd3b1e95b2e74c2da15b46e5df29a1c6
msgid "Here is an example cache function.  It generates the cache key from a specific prefix (actually a format string) and the current path of the request.  Notice that we are using a function that first creates the decorator that then decorates the function.  Sounds awful? Unfortunately it is a little bit more complex, but the code should still be straightforward to read."
msgstr ""

#: ../../project/docs/patterns/viewdecorators.rst:71
#: f6d165fac39246188325f011e934731c
msgid "The decorated function will then work as follows"
msgstr ""

#: ../../project/docs/patterns/viewdecorators.rst:73
#: 988efee21f68408b88180f2ddcd47052
msgid "get the unique cache key for the current request based on the current path."
msgstr ""

#: ../../project/docs/patterns/viewdecorators.rst:75
#: 704562caeab44dec8041ab6732a25fea
msgid "get the value for that key from the cache. If the cache returned something we will return that value."
msgstr ""

#: ../../project/docs/patterns/viewdecorators.rst:77
#: 1b6b99e8b0f246588691c378d212db1c
msgid "otherwise the original function is called and the return value is stored in the cache for the timeout provided (by default 5 minutes)."
msgstr ""

#: ../../project/docs/patterns/viewdecorators.rst:80
#: 3ace0e31b3b24e3d875c4031acffaf89
msgid "Here the code::"
msgstr ""

#: ../../project/docs/patterns/viewdecorators.rst:99
#: 9cb4c7383b854407b7efa62b089405a4
msgid "Notice that this assumes an instantiated ``cache`` object is available, see :doc:`caching`."
msgstr ""

#: ../../project/docs/patterns/viewdecorators.rst:104
#: 4748889bfff04e70bdbd62a57fc79ebe
msgid "Templating Decorator"
msgstr ""

#: ../../project/docs/patterns/viewdecorators.rst:106
#: 9f726d6fcdcb4a4fa170101d744c67d7
msgid "A common pattern invented by the TurboGears guys a while back is a templating decorator.  The idea of that decorator is that you return a dictionary with the values passed to the template from the view function and the template is automatically rendered.  With that, the following three examples do exactly the same::"
msgstr ""

#: ../../project/docs/patterns/viewdecorators.rst:126
#: ffc44c0850c9408699bf04340b9bbce7
msgid "As you can see, if no template name is provided it will use the endpoint of the URL map with dots converted to slashes + ``'.html'``.  Otherwise the provided template name is used.  When the decorated function returns, the dictionary returned is passed to the template rendering function.  If ``None`` is returned, an empty dictionary is assumed, if something else than a dictionary is returned we return it from the function unchanged.  That way you can still use the redirect function or return simple strings."
msgstr ""

#: ../../project/docs/patterns/viewdecorators.rst:134
#: b8ff14afe1a0485b9e8d950de73804f8
msgid "Here is the code for that decorator::"
msgstr ""

#: ../../project/docs/patterns/viewdecorators.rst:157
#: 5f98df79cd344effb38329589c153003
msgid "Endpoint Decorator"
msgstr ""

#: ../../project/docs/patterns/viewdecorators.rst:159
#: ef4690235411405985e287ecfb40ca0f
msgid "When you want to use the werkzeug routing system for more flexibility you need to map the endpoint as defined in the :class:`~werkzeug.routing.Rule` to a view function. This is possible with this decorator. For example::"
msgstr ""
