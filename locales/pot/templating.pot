# SOME DESCRIPTIVE TITLE.
# Copyright (C) 2010 Pallets
# This file is distributed under the same license as the Flask package.
# FIRST AUTHOR <EMAIL@ADDRESS>, YEAR.
#
#, fuzzy
msgid ""
msgstr ""
"Project-Id-Version: Flask 3.1.x\n"
"Report-Msgid-Bugs-To: \n"
"POT-Creation-Date: 2024-11-20 19:31-0800\n"
"PO-Revision-Date: YEAR-MO-DA HO:MI+ZONE\n"
"Last-Translator: FULL NAME <EMAIL@ADDRESS>\n"
"Language-Team: LANGUAGE <LL@li.org>\n"
"MIME-Version: 1.0\n"
"Content-Type: text/plain; charset=UTF-8\n"
"Content-Transfer-Encoding: 8bit\n"

#: ../../project/docs/templating.rst:2
#: eb7013c52e264c51bc92b7a862efc5e1
msgid "Templates"
msgstr ""

#: ../../project/docs/templating.rst:4
#: 03842e5bd2ce456894ae580b6b66eed1
msgid "Flask leverages Jinja2 as its template engine.  You are obviously free to use a different template engine, but you still have to install Jinja2 to run Flask itself.  This requirement is necessary to enable rich extensions. An extension can depend on Jinja2 being present."
msgstr ""

#: ../../project/docs/templating.rst:9
#: 22e277ab26a349039336e3836ca266d7
msgid "This section only gives a very quick introduction into how Jinja2 is integrated into Flask.  If you want information on the template engine's syntax itself, head over to the official `Jinja2 Template Documentation <https://jinja.palletsprojects.com/templates/>`_ for more information."
msgstr ""

#: ../../project/docs/templating.rst:16
#: ec807a130eca48868a2f34c19e02c588
msgid "Jinja Setup"
msgstr ""

#: ../../project/docs/templating.rst:18
#: 96d2d443bce44a7a97e0c9275a7da52f
msgid "Unless customized, Jinja2 is configured by Flask as follows:"
msgstr ""

#: ../../project/docs/templating.rst:20
#: 34a534b1eb844fe291d2a849adc79874
msgid "autoescaping is enabled for all templates ending in ``.html``, ``.htm``, ``.xml``, ``.xhtml``, as well as ``.svg`` when using :func:`~flask.templating.render_template`."
msgstr ""

#: ../../project/docs/templating.rst:23
#: 61df07f3fc474b4e904f268b87b94ba6
msgid "autoescaping is enabled for all strings when using :func:`~flask.templating.render_template_string`."
msgstr ""

#: ../../project/docs/templating.rst:25
#: 28b3d9146cb540a19340ed05afc30468
msgid "a template has the ability to opt in/out autoescaping with the ``{% autoescape %}`` tag."
msgstr ""

#: ../../project/docs/templating.rst:27
#: b4a701494a174349afabe8b4338b1d39
msgid "Flask inserts a couple of global functions and helpers into the Jinja2 context, additionally to the values that are present by default."
msgstr ""

#: ../../project/docs/templating.rst:32
#: d23ff0cee87644c693243508d4ba7618
msgid "Standard Context"
msgstr ""

#: ../../project/docs/templating.rst:34
#: ea965ccd4e784cec88d53eea73dd4ab0
msgid "The following global variables are available within Jinja2 templates by default:"
msgstr ""

#: ../../project/docs/templating.rst:40
#: 35b2b53f23464658a168ab3c7cd63816
msgid "The current configuration object (:data:`flask.Flask.config`)"
msgstr ""

#: ../../project/docs/templating.rst:44
#: 81fef7a0f5ba494491f455c261bbae19
msgid "This is now always available, even in imported templates."
msgstr ""

#: ../../project/docs/templating.rst:50
#: fd0f2f58151e468790bdb2353eae7918
msgid "The current request object (:class:`flask.request`).  This variable is unavailable if the template was rendered without an active request context."
msgstr ""

#: ../../project/docs/templating.rst:57
#: f58c6d808ffc4f7285e6fc6492ed5663
msgid "The current session object (:class:`flask.session`).  This variable is unavailable if the template was rendered without an active request context."
msgstr ""

#: ../../project/docs/templating.rst:64
#: 0b55aad352304d61be492f318ea23c59
msgid "The request-bound object for global variables (:data:`flask.g`).  This variable is unavailable if the template was rendered without an active request context."
msgstr ""

#: ../../project/docs/templating.rst:71
#: 97c41d38972b4c7b91bba4e3c8824ff1
msgid "The :func:`flask.url_for` function."
msgstr ""

#: ../../project/docs/templating.rst:76
#: 834d737d486b402185e51561cdd75bee
msgid "The :func:`flask.get_flashed_messages` function."
msgstr ""

#: ../../project/docs/templating.rst:78
#: 8732643371a24ddb994db8a37b5af4d5
msgid "The Jinja Context Behavior"
msgstr ""

#: ../../project/docs/templating.rst:80
#: 11e95abb4a384f77b93c6ded8f440c67
msgid "These variables are added to the context of variables, they are not global variables.  The difference is that by default these will not show up in the context of imported templates.  This is partially caused by performance considerations, partially to keep things explicit."
msgstr ""

#: ../../project/docs/templating.rst:85
#: 36b8565e43564be491557f3bbe84a9b6
msgid "What does this mean for you?  If you have a macro you want to import, that needs to access the request object you have two possibilities:"
msgstr ""

#: ../../project/docs/templating.rst:88
#: ef22de35064a442c82d72d226246d898
msgid "you explicitly pass the request to the macro as parameter, or the attribute of the request object you are interested in."
msgstr ""

#: ../../project/docs/templating.rst:90
#: 5694f449ef7e428f9f7821c3cf3ce90f
msgid "you import the macro \"with context\"."
msgstr ""

#: ../../project/docs/templating.rst:92
#: b1d6bfec5c1945c6bbb70a6d8b5106af
msgid "Importing with context looks like this:"
msgstr ""

#: ../../project/docs/templating.rst:100
#: 43a1ea2148f241508523f8f37072ce28
msgid "Controlling Autoescaping"
msgstr ""

#: ../../project/docs/templating.rst:102
#: 0edfec1ab7f9444fb1c412c1e5af52a7
msgid "Autoescaping is the concept of automatically escaping special characters for you.  Special characters in the sense of HTML (or XML, and thus XHTML) are ``&``, ``>``, ``<``, ``\"`` as well as ``'``.  Because these characters carry specific meanings in documents on their own you have to replace them by so called \"entities\" if you want to use them for text.  Not doing so would not only cause user frustration by the inability to use these characters in text, but can also lead to security problems.  (see :ref:`security-xss`)"
msgstr ""

#: ../../project/docs/templating.rst:111
#: a00e1836a4134b8cbd001b1750458a30
msgid "Sometimes however you will need to disable autoescaping in templates. This can be the case if you want to explicitly inject HTML into pages, for example if they come from a system that generates secure HTML like a markdown to HTML converter."
msgstr ""

#: ../../project/docs/templating.rst:116
#: 6aaec38785354f42b00b169f0ab805dd
msgid "There are three ways to accomplish that:"
msgstr ""

#: ../../project/docs/templating.rst:118
#: fbc6be9de1ec48fb815d4e7c6a70beb5
msgid "In the Python code, wrap the HTML string in a :class:`~markupsafe.Markup` object before passing it to the template.  This is in general the recommended way."
msgstr ""

#: ../../project/docs/templating.rst:121
#: 50b952e3b6df449daf6642f7f8cf44c6
msgid "Inside the template, use the ``|safe`` filter to explicitly mark a string as safe HTML (``{{ myvariable|safe }}``)"
msgstr ""

#: ../../project/docs/templating.rst:123
#: 8f32d6ed1d1b4cf08ad170320209103a
msgid "Temporarily disable the autoescape system altogether."
msgstr ""

#: ../../project/docs/templating.rst:125
#: 3e61e2cb5663493cacd893b22af526b5
msgid "To disable the autoescape system in templates, you can use the ``{% autoescape %}`` block:"
msgstr ""

#: ../../project/docs/templating.rst:135
#: f088c63802b24398b27e5e3a3f399f10
msgid "Whenever you do this, please be very cautious about the variables you are using in this block."
msgstr ""

#: ../../project/docs/templating.rst:141
#: dede5aaf0203436c9d55eac2c778f90c
msgid "Registering Filters"
msgstr ""

#: ../../project/docs/templating.rst:143
#: 9c2b9412f1ee4e98960acc2911fbbee6
msgid "If you want to register your own filters in Jinja2 you have two ways to do that.  You can either put them by hand into the :attr:`~flask.Flask.jinja_env` of the application or use the :meth:`~flask.Flask.template_filter` decorator."
msgstr ""

#: ../../project/docs/templating.rst:148
#: b2c79194b22b41fa8c77c5e12d6d391d
msgid "The two following examples work the same and both reverse an object::"
msgstr ""

#: ../../project/docs/templating.rst:158
#: 396579af010e488ea23a24e2dc76e1c2
msgid "In case of the decorator the argument is optional if you want to use the function name as name of the filter.  Once registered, you can use the filter in your templates in the same way as Jinja2's builtin filters, for example if you have a Python list in context called `mylist`::"
msgstr ""

#: ../../project/docs/templating.rst:168
#: 0456173be3c44c8db7676ad8589be8fc
msgid "Context Processors"
msgstr ""

#: ../../project/docs/templating.rst:170
#: 7880ec51b478409aa1356158145a67e4
msgid "To inject new variables automatically into the context of a template, context processors exist in Flask.  Context processors run before the template is rendered and have the ability to inject new values into the template context.  A context processor is a function that returns a dictionary.  The keys and values of this dictionary are then merged with the template context, for all templates in the app::"
msgstr ""

#: ../../project/docs/templating.rst:181
#: edb964353ae649b0ab9e235264d91807
msgid "The context processor above makes a variable called `user` available in the template with the value of `g.user`.  This example is not very interesting because `g` is available in templates anyways, but it gives an idea how this works."
msgstr ""

#: ../../project/docs/templating.rst:186
#: f9c02b7ba28a46ac967abd858098bc1e
msgid "Variables are not limited to values; a context processor can also make functions available to templates (since Python allows passing around functions)::"
msgstr ""

#: ../../project/docs/templating.rst:196
#: c1e2eb29965c4dc59404a4a9d23a3f09
msgid "The context processor above makes the `format_price` function available to all templates::"
msgstr ""

#: ../../project/docs/templating.rst:201
#: 87ad6a4fbc3942ddab69848dcb534de9
msgid "You could also build `format_price` as a template filter (see :ref:`registering-filters`), but this demonstrates how to pass functions in a context processor."
msgstr ""

#: ../../project/docs/templating.rst:206
#: d2b07d6426584b5e87726bb277c6f7fc
msgid "Streaming"
msgstr ""

#: ../../project/docs/templating.rst:208
#: 3d7bc75969c243488059f7c488084b5f
msgid "It can be useful to not render the whole template as one complete string, instead render it as a stream, yielding smaller incremental strings. This can be used for streaming HTML in chunks to speed up initial page load, or to save memory when rendering a very large template."
msgstr ""

#: ../../project/docs/templating.rst:214
#: 9f361a165b634a9b8e5a1ee7e9896e4a
msgid "The Jinja2 template engine supports rendering a template piece by piece, returning an iterator of strings. Flask provides the :func:`~flask.stream_template` and :func:`~flask.stream_template_string` functions to make this easier to use."
msgstr ""

#: ../../project/docs/templating.rst:227
#: 87ea2d360de24eca97d1a93f3ccd6c0b
msgid "These functions automatically apply the :func:`~flask.stream_with_context` wrapper if a request is active, so that it remains available in the template."
msgstr ""
