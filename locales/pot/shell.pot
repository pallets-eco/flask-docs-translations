# SOME DESCRIPTIVE TITLE.
# Copyright (C) 2010 Pallets
# This file is distributed under the same license as the Flask package.
# FIRST AUTHOR <EMAIL@ADDRESS>, YEAR.
#
#, fuzzy
msgid ""
msgstr ""
"Project-Id-Version: Flask 3.1.x\n"
"Report-Msgid-Bugs-To: \n"
"POT-Creation-Date: 2024-11-20 19:31-0800\n"
"PO-Revision-Date: YEAR-MO-DA HO:MI+ZONE\n"
"Last-Translator: FULL NAME <EMAIL@ADDRESS>\n"
"Language-Team: LANGUAGE <LL@li.org>\n"
"MIME-Version: 1.0\n"
"Content-Type: text/plain; charset=UTF-8\n"
"Content-Transfer-Encoding: 8bit\n"

#: ../../project/docs/shell.rst:2
#: 8913da8dd04d4372a938e37a9b631237
msgid "Working with the Shell"
msgstr ""

#: ../../project/docs/shell.rst:6
#: af9de4505ffe47a7b84c21e58f875550
msgid "One of the reasons everybody loves Python is the interactive shell.  It basically allows you to execute Python commands in real time and immediately get results back.  Flask itself does not come with an interactive shell, because it does not require any specific setup upfront, just import your application and start playing around."
msgstr ""

#: ../../project/docs/shell.rst:12
#: ea904c0e44694ea58ad5f638c33856a1
msgid "There are however some handy helpers to make playing around in the shell a more pleasant experience.  The main issue with interactive console sessions is that you're not triggering a request like a browser does which means that :data:`~flask.g`, :data:`~flask.request` and others are not available.  But the code you want to test might depend on them, so what can you do?"
msgstr ""

#: ../../project/docs/shell.rst:19
#: ac7bd432be5f4f23a5902dd5ad10297a
msgid "This is where some helper functions come in handy.  Keep in mind however that these functions are not only there for interactive shell usage, but also for unit testing and other situations that require a faked request context."
msgstr ""

#: ../../project/docs/shell.rst:24
#: efc74d3477e0493eadcd5af7c47fbff0
msgid "Generally it's recommended that you read :doc:`reqcontext` first."
msgstr ""

#: ../../project/docs/shell.rst:27
#: f6abe9b3332b4d859f7e68a1a72fd4b4
msgid "Command Line Interface"
msgstr ""

#: ../../project/docs/shell.rst:29
#: 9c339da0df374802a535a08e34a29375
msgid "Starting with Flask 0.11 the recommended way to work with the shell is the ``flask shell`` command which does a lot of this automatically for you. For instance the shell is automatically initialized with a loaded application context."
msgstr ""

#: ../../project/docs/shell.rst:34
#: 9d8eac28d5a14595bbe6b6a1eb187b7a
msgid "For more information see :doc:`/cli`."
msgstr ""

#: ../../project/docs/shell.rst:37
#: 02c6a31931374b288c02ab42eb6aae45
msgid "Creating a Request Context"
msgstr ""

#: ../../project/docs/shell.rst:39
#: d43b115011fd435cbf857ca04f519bf8
msgid "The easiest way to create a proper request context from the shell is by using the :attr:`~flask.Flask.test_request_context` method which creates us a :class:`~flask.ctx.RequestContext`:"
msgstr ""

#: ../../project/docs/shell.rst:45
#: 8ac7b8746d864dec83b061a60ff107ee
msgid "Normally you would use the ``with`` statement to make this request object active, but in the shell it's easier to use the :meth:`~flask.ctx.RequestContext.push` and :meth:`~flask.ctx.RequestContext.pop` methods by hand:"
msgstr ""

#: ../../project/docs/shell.rst:52
#: 8d2f94bd4ad643c3b2453728b4f2682c
msgid "From that point onwards you can work with the request object until you call `pop`:"
msgstr ""

#: ../../project/docs/shell.rst:58
#: 443d5d5897544b278b74acead1a461dd
msgid "Firing Before/After Request"
msgstr ""

#: ../../project/docs/shell.rst:60
#: 945ef3d18369430bbc5c3cb95b60c524
msgid "By just creating a request context, you still don't have run the code that is normally run before a request.  This might result in your database being unavailable if you are connecting to the database in a before-request callback or the current user not being stored on the :data:`~flask.g` object etc."
msgstr ""

#: ../../project/docs/shell.rst:66
#: 4b79c5bdc9a342618cbb57f819956a83
msgid "This however can easily be done yourself.  Just call :meth:`~flask.Flask.preprocess_request`:"
msgstr ""

#: ../../project/docs/shell.rst:73
#: fa94891d70ed4112b843397e57f91402
msgid "Keep in mind that the :meth:`~flask.Flask.preprocess_request` function might return a response object, in that case just ignore it."
msgstr ""

#: ../../project/docs/shell.rst:76
#: a83514a589b2486d8d765ebdc8dc445b
msgid "To shutdown a request, you need to trick a bit before the after request functions (triggered by :meth:`~flask.Flask.process_response`) operate on a response object:"
msgstr ""

#: ../../project/docs/shell.rst:84
#: 7845ef63d60c4c71a6f73a640e8dd8a6
msgid "The functions registered as :meth:`~flask.Flask.teardown_request` are automatically called when the context is popped.  So this is the perfect place to automatically tear down resources that were needed by the request context (such as database connections)."
msgstr ""

#: ../../project/docs/shell.rst:91
#: 090907fe0ba14d12a149ff06f7ce66d8
msgid "Further Improving the Shell Experience"
msgstr ""

#: ../../project/docs/shell.rst:93
#: a87f3fec7a124415add204e3fb232ca0
msgid "If you like the idea of experimenting in a shell, create yourself a module with stuff you want to star import into your interactive session.  There you could also define some more helper methods for common things such as initializing the database, dropping tables etc."
msgstr ""

#: ../../project/docs/shell.rst:98
#: 7cb4e8bfcf20403aa6d47352afe4dff5
msgid "Just put them into a module (like `shelltools`) and import from there:"
msgstr ""
