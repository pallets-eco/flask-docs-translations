# SOME DESCRIPTIVE TITLE.
# Copyright (C) 2010 Pallets
# This file is distributed under the same license as the Flask package.
# Komeil Parseh <ahmdparsh129@gmail.com>, 2021.
#
msgid ""
msgstr ""
"Project-Id-Version: Flask 2.1.x\n"
"Report-Msgid-Bugs-To: \n"
"POT-Creation-Date: 2024-11-20 19:31-0800\n"
"PO-Revision-Date: 2021-12-14 15:15+0330\n"
"Last-Translator: Komeil Parseh  <ahmdparsh129@gmail.com>\n"
"Language: per\n"
"Language-Team: fa <ahmdparsh129@gmail.com>\n"
"Plural-Forms: nplurals=1; plural=0;\n"
"MIME-Version: 1.0\n"
"Content-Type: text/plain; charset=utf-8\n"
"Content-Transfer-Encoding: 8bit\n"
"Generated-By: Babel 2.16.0\n"

#: ../../project/docs/tutorial/database.rst:4 c6ca508666cc429499841107fc118d14
msgid "Define and Access the Database"
msgstr "تعریف و دسترسی به دیتا بیس"

#: ../../project/docs/tutorial/database.rst:6 9f0673d8a9af4afe9cb0d859e4c15176
msgid ""
"The application will use a `SQLite`_ database to store users and posts. "
"Python comes with built-in support for SQLite in the :mod:`sqlite3` "
"module."
msgstr ""
"این برنامه میخواهد از دیتا بیس `SQLite`_ انبار کردن کاربران و پست ها "
"استفاده کند. پایتون با پشتیبانی داخلی از SQLite در ماژول :mod:`sqlite3` "
"آمده است."

#: ../../project/docs/tutorial/database.rst:10 1b7c47ae830140d4aea6a4484551dcdd
msgid ""
"SQLite is convenient because it doesn't require setting up a separate "
"database server and is built-in to Python. However, if concurrent "
"requests try to write to the database at the same time, they will slow "
"down as each write happens sequentially. Small applications won't notice "
"this. Once you become big, you may want to switch to a different "
"database."
msgstr ""
"SQLite راحت است زیرا هیچ الزامی برای راه‌اندازی جداگانه سرور ندارد و "
"همچنین به صورت داخلی در پایتون قرار دارد. با این حال اگر چند درخواست "
"همزمان بخواهند، به صورت همزمان در دیتا بیس داده بنویسند، سرعت بسیار کاهش "
"میابد. البته این کاهش سرعت در برنامه های کوچک محسوس نیست. هنگامی که بزرگ "
"شدید، شاید بخواهید از دیتا بیس دیگری استفاده کنید."

#: ../../project/docs/tutorial/database.rst:17 4e9f4e696f0f48d698dca0b71a7a5328
msgid ""
"The tutorial doesn't go into detail about SQL. If you are not familiar "
"with it, the SQLite docs describe the `language`_."
msgstr ""
"این آموزش درباره SQL نیست. اگر شما به این آشنا نیستید، مستندات SQLite در "
"`language`_ شرح داده شده است."

#: ../../project/docs/tutorial/database.rst:25 140133c44429469183825c05fb6313a3
msgid "Connect to the Database"
msgstr "اتصال به دیتابیس"

#: ../../project/docs/tutorial/database.rst:27 324f192d9eb947f2afe1fa71b4168868
msgid ""
"The first thing to do when working with a SQLite database (and most other"
" Python database libraries) is to create a connection to it. Any queries "
"and operations are performed using the connection, which is closed after "
"the work is finished."
msgstr ""
"اولین چیز این است که کجا با دیتا بیس SQLite (و سایر کتابخانه های دیتا بیس"
" پایتون) یک اتصال بسازید؛ اکثر کوئری ها و عملیات ها در پلتفرم با استفاده "
"از اتصال انجام میشوند و پس از اتمام کار بسته میشوند."

#: ../../project/docs/tutorial/database.rst:32 7be9486d07f140fd98b436d5fdccf9aa
msgid ""
"In web applications this connection is typically tied to the request. It "
"is created at some point when handling a request, and closed before the "
"response is sent."
msgstr ""
"در برنامه های وب، این اتصال معمولا به درخواست مرتبط است. این اتصال در "
"زمان رسیدگی به درخواست ایجاد میشود و قبل از ارسال پاسخ، بسته می شود."

#: ../../project/docs/tutorial/database.rst:36
#: ../../project/docs/tutorial/database.rst:120
#: ../../project/docs/tutorial/database.rst:165
#: 2e0a076f261e4a5998d97bcee39db3a2 443bbf5dc3244d419a025c7cfb0d2367
#: 6fe0d9db8c414fc9bcbceec2ab6b6826
msgid "``flaskr/db.py``"
msgstr "``flaskr/db.py``"

#: ../../project/docs/tutorial/database.rst:63 ceee35fd31dc4e4a8efb19f9712ba683
msgid ""
":data:`g` is a special object that is unique for each request. It is used"
" to store data that might be accessed by multiple functions during the "
"request. The connection is stored and reused instead of creating a new "
"connection if ``get_db`` is called a second time in the same request."
msgstr ""
":data:`g` یک شی خاص است که برای هر درخواست، منحصر بفرد است. برای ذخیره "
"داده هایی استفاده میشود که ممکن است توسط چندین تابع در طول درخواست قابل "
"دسترسی باشد. اگر ``get_db`` برای بار دوم در آن درخواست، فراخوانی شود، به "
"جای ایجاد یک اتصال جدید، اتصال ذخیره و دوباره استفاده می شود."

#: ../../project/docs/tutorial/database.rst:69 a1af881658ff4877b1afc1f32e797397
msgid ""
":data:`current_app` is another special object that points to the Flask "
"application handling the request. Since you used an application factory, "
"there is no application object when writing the rest of your code. "
"``get_db`` will be called when the application has been created and is "
"handling a request, so :data:`current_app` can be used."
msgstr ""
":data:`current_app` یک شی خاص دیگر است که به برنامه فلاسک اشاره میکند تا "
"درخواست را مدیریت کند. از آنجایی که شما از کارخانه برنامه کاربردی استفاده"
" می‌کنید، هنگام نوشتن بقیه کد، شما هیچ شی دیگری برای برنامه نمیسازید. "
"``get_db`` زمانی فراخوانده می شود که برنامه ایجاد شود . در حال رسیدگی به "
"درخواست باشد، بنابراین میتوان از :data:`current_app` استفاده کرد."

#: ../../project/docs/tutorial/database.rst:75 50bf1d5f91674bd0802be892e4b09c3a
msgid ""
":func:`sqlite3.connect` establishes a connection to the file pointed at "
"by the ``DATABASE`` configuration key. This file doesn't have to exist "
"yet, and won't until you initialize the database later."
msgstr ""
":func:`sqlite3.connect` ارتباطی را با فایلی که توسط کلید پیکربندی که "
"به`DATABASE`` اشاره شده است، برقرار میکند. این فایل هنوز لازم نیست وجود "
"داشته باشد و تا زمانی که دیتابیس را بعدا مقداردهی نکنید، وجود نخواهد "
"داشت."

#: ../../project/docs/tutorial/database.rst:79 ea68cfbe00704e798517ca59e3dac68e
msgid ""
":class:`sqlite3.Row` tells the connection to return rows that behave like"
" dicts. This allows accessing the columns by name."
msgstr ""
":class:`sqlite3.Row` به اتصال می گوید که ردیف هایی را که مانند دیکشنری ها"
" رفتار می کنند، برگرداند. این اجازه می دهد تا به ستون ها با نام دسترسی "
"داشته باشید."

#: ../../project/docs/tutorial/database.rst:82 c84fb4081ee141f48f5a0ee9e6581ba4
msgid ""
"``close_db`` checks if a connection was created by checking if ``g.db`` "
"was set. If the connection exists, it is closed. Further down you will "
"tell your application about the ``close_db`` function in the application "
"factory so that it is called after each request."
msgstr ""
"``close_db`` با بررسی اینکه `g.db`` تنظیم شده است، بررسی می‌کند که آیا یک"
" اتصال ایجاد شده است. اگر اتصال وجود داشته باشد، بسته است. در ادامه به "
"برنامه خود در مورد عملکرد ``close_db`` در کارخانه برنامه خواهید گفت تا پس"
" از هر درخواست فراخوانی شود."

#: ../../project/docs/tutorial/database.rst:89 96e57b6a81c64d92a7a6c5c3206871f7
msgid "Create the Tables"
msgstr "ساخته جدول ها"

#: ../../project/docs/tutorial/database.rst:91 7bbc95d5d8c34b029fcbd7dc60f1dddb
msgid ""
"In SQLite, data is stored in *tables* and *columns*. These need to be "
"created before you can store and retrieve data. Flaskr will store users "
"in the ``user`` table, and posts in the ``post`` table. Create a file "
"with the SQL commands needed to create empty tables:"
msgstr ""
"در SQLite، داده ها در *tables* و *columns* انبار میشوند. آنها نیاز دارند،"
" قبل از انبار شدن و پس گرفتن داده ها، ساخته شوند. Flaskr میخواهد کاربران "
"را در جدول ``user`` و پست ها را در جدول ``post`` انبار کند. یک فایل با "
"دستور های SQL نیاز است تا جدول خالی ساخته شود. آن را بسازید:"

#: ../../project/docs/tutorial/database.rst:96 c96601a88e5041fb90b2329fbffbb493
msgid "``flaskr/schema.sql``"
msgstr "``flaskr/schema.sql``"

#: ../../project/docs/tutorial/database.rst:117
#: e16fd8f8f05944c48937537b985a9d73
msgid ""
"Add the Python functions that will run these SQL commands to the "
"``db.py`` file:"
msgstr "و توابع پایتون دستورات SQL را در فایل ``db.py`` اجرا خواهند کرد:"

#: ../../project/docs/tutorial/database.rst:141
#: 0ab5a47db21544fa9bd764c847f13436
msgid ""
":meth:`open_resource() <Flask.open_resource>` opens a file relative to "
"the ``flaskr`` package, which is useful since you won't necessarily know "
"where that location is when deploying the application later. ``get_db`` "
"returns a database connection, which is used to execute the commands read"
" from the file."
msgstr ""
":meth:`open_resource() <Flask.open_resource>` فایلی را نسبت به بسته "
"``flaskr`` باز می کند، که مفید است زیرا در زمان استقرار برنامه لزوماً نمی"
" دانید آن مکان کجاست. ``get_db`` یک اتصال پایگاه داده را برمی گرداند که "
"برای اجرای دستورات خوانده شده از فایل استفاده می شود."

#: ../../project/docs/tutorial/database.rst:147
#: 08a50c96644a4bb6a40ef34d7f932a0e
msgid ""
":func:`click.command` defines a command line command called ``init-db`` "
"that calls the ``init_db`` function and shows a success message to the "
"user. You can read :doc:`/cli` to learn more about writing commands."
msgstr ""
":func:`click.command` یک خط فرمان به نام ``init-db`` را تعریف می کند که "
"تابع ``init_db`` را فراخوانی می کند و پیام موفقیت آمیز را به کاربر نشان "
"می دهد. برای کسب اطلاعات بیشتر در مورد نوشتن دستورات می توانید "
":doc:`/cli` را بخوانید."

#: ../../project/docs/tutorial/database.rst:151
#: 163c122b3a2f488187f8f32da7f871d0
msgid ""
"The call to :func:`sqlite3.register_converter` tells Python how to "
"interpret timestamp values in the database. We convert the value to a "
":class:`datetime.datetime`."
msgstr ""

#: ../../project/docs/tutorial/database.rst:157
#: 12ed5fe5f2c24f94b071893ac339f0ba
msgid "Register with the Application"
msgstr "ثبت نام با برنامه"

#: ../../project/docs/tutorial/database.rst:159
#: 09cbf5f8d76c4789a5c34749c412e5a4
msgid ""
"The ``close_db`` and ``init_db_command`` functions need to be registered "
"with the application instance; otherwise, they won't be used by the "
"application. However, since you're using a factory function, that "
"instance isn't available when writing the functions. Instead, write a "
"function that takes an application and does the registration."
msgstr ""
"توابع ``close_db`` و ``indit_db_command‍‍`` باید در نمونه برنامه ثبت "
"شوند. در غیر این صورت، آنها توسط برنامه استفاده نخواهند شد. با این حال، "
"از آنجایی که شما از یک تابع کارخانه استفاده می کنید، این نمونه هنگام "
"نوشتن توابع در دسترس نیست. در عوض، تابعی بنویسید که یک برنامه کاربردی را "
"می گیرد و ثبت را انجام می دهد."

#: ../../project/docs/tutorial/database.rst:172
#: 733b6d992d43429e8429b4f4135c5aa5
msgid ""
":meth:`app.teardown_appcontext() <Flask.teardown_appcontext>` tells Flask"
" to call that function when cleaning up after returning the response."
msgstr ""
":meth:`app.teardown_appcontext() <Flask.teardown_appcontext>` به فلاسک می"
" گوید که هنگام پاکسازی پس از بازگرداندن پاسخ، آن تابع را فراخوانی کند."

#: ../../project/docs/tutorial/database.rst:176
#: f8956fb99d6a403facdfbf157bf959c7
msgid ""
":meth:`app.cli.add_command() <click.Group.add_command>` adds a new "
"command that can be called with the ``flask`` command."
msgstr ""
":meth:`app.cli.add_command() <click.Group.add_command>` یک دستور جدید "
"اضافه می کند که می تواند با دستور ``flask`` فراخوانی شود."

#: ../../project/docs/tutorial/database.rst:179
#: a52b2296ac85446cb04640e92446a438
msgid ""
"Import and call this function from the factory. Place the new code at the"
" end of the factory function before returning the app."
msgstr ""
"این تابع را از کارخانه وارد کرده و فراخوانی کنید. قبل از بازگرداندن "
"برنامه، کد جدید را در انتهای عملکرد کارخانه قرار دهید."

#: ../../project/docs/tutorial/database.rst:182
#: e763c27a7c7b4e36af176a8575845a25
msgid "``flaskr/__init__.py``"
msgstr "``flaskr/__init__.py``"

#: ../../project/docs/tutorial/database.rst:196
#: 656158d1eebf4da19d8dcf0f80e9e05d
msgid "Initialize the Database File"
msgstr "راه اندازی فایل پایگاه داده"

#: ../../project/docs/tutorial/database.rst:198
#: f77d15ea10e247bfa15ea83b40f77d48
msgid ""
"Now that ``init-db`` has been registered with the app, it can be called "
"using the ``flask`` command, similar to the ``run`` command from the "
"previous page."
msgstr ""
"اکنون که ``init-db`` در برنامه ثبت شده است، می توان با استفاده از دستور "
"``flask``، مشابه دستور ``run`` از صفحه قبل، آن را فراخوانی کرد."

#: ../../project/docs/tutorial/database.rst:204
#: 33b1ddc5ea0c44f888d3c3ee992fd5d0
#, fuzzy
msgid ""
"If you're still running the server from the previous page, you can either"
" stop the server, or run this command in a new terminal. If you use a new"
" terminal, remember to change to your project directory and activate the "
"env as described in :doc:`/installation`."
msgstr ""
"اگر هنوز سرور صفحه قبلی را اجرا می کنید، می توانید سرور را متوقف کنید یا "
"این دستور را در یک ترمینال جدید اجرا کنید. اگر از ترمینال جدیدی استفاده "
"می کنید، به یاد داشته باشید که به دایرکتوری پروژه خود تغییر دهید و env را"
" همانطور که در :doc:`/installation` توضیح داده شده فعال کنید. همچنین باید"
" ``FLASK_APP`` و ``FLASK_ENV`` را همانطور که در صفحه قبل نشان داده شده "
"است تنظیم کنید."

#: ../../project/docs/tutorial/database.rst:209
#: 6e6cf49e0a914873a63c923bacedc9d3
msgid "Run the ``init-db`` command:"
msgstr "دستور ``init-db`` را اجرا کنید:"

#: ../../project/docs/tutorial/database.rst:216
#: b211b9fa6c304c2ca5d06a9a802b5d09
msgid ""
"There will now be a ``flaskr.sqlite`` file in the ``instance`` folder in "
"your project."
msgstr "اکنون فایل ``flaskr.sqlite`` در پوشه ``instance`` در پروژه خواهد بود."

#: ../../project/docs/tutorial/database.rst:219
#: 24b9e0b8bef2462fab7d31a4f9ec3441
msgid "Continue to :doc:`views`."
msgstr "با :doc:`views` ادامه دهید."

