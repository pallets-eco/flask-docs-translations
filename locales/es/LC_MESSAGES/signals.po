# SOME DESCRIPTIVE TITLE.
# Copyright (C) 2010 Pallets
# This file is distributed under the same license as the Flask package.
# FIRST AUTHOR <pedrotorcattsoto@gmail.com>, 2021.
#
msgid ""
msgstr ""
"Project-Id-Version: Flask 3.0.x\n"
"Report-Msgid-Bugs-To: \n"
"POT-Creation-Date: 2023-05-09 22:02-0400\n"
"PO-Revision-Date: 2024-05-10 21:13-0400\n"
"Last-Translator: Pedro Torcatt <pedrotorcattsoto@gmail.com>\n"
"Language-Team: ES\n"
"Language: es\n"
"MIME-Version: 1.0\n"
"Content-Type: text/plain; charset=utf-8\n"
"Content-Transfer-Encoding: 8bit\n"
"Plural-Forms: nplurals=2; plural=(n != 1);\n"
"Generated-By: Babel 2.10.1\n"
"X-Generator: Poedit 3.4.2\n"

#: ../../signals.rst:2
msgid "Signals"
msgstr "Señales"

#: ../../signals.rst:4
msgid ""
"Signals are a lightweight way to notify subscribers of certain events during"
" the lifecycle of the application and each request. When an event occurs, it"
" emits the signal, which calls each subscriber."
msgstr ""
"Las señales son una forma ligera de notificar a los suscriptores "
"determinados eventos durante el ciclo de vida de la aplicación y de cada "
"solicitud. Cuando se produce un evento, emite la señal, que llama a cada "
"suscriptor."

#: ../../signals.rst:8
msgid ""
"Signals are implemented by the `Blinker`_ library. See its documentation for"
" detailed information. Flask provides some built-in signals. Extensions may "
"provide their own."
msgstr ""
"Las señales son implementadas por la librería `Blinker`_. Consulte su "
"documentación para obtener información detallada. Flask proporciona algunas "
"señales integradas. Las extensiones pueden proporcionar las suyas propias."

#: ../../signals.rst:11
msgid ""
"Many signals mirror Flask's decorator-based callbacks with similar names. "
"For example, the :data:`.request_started` signal is similar to the "
":meth:`~.Flask.before_request` decorator. The advantage of signals over "
"handlers is that they can be subscribed to temporarily, and can't directly "
"affect the application. This is useful for testing, metrics, auditing, and "
"more. For example, if you want to know what templates were rendered at what "
"parts of what requests, there is a signal that will notify you of that "
"information."
msgstr ""
"Muchas señales reflejan las devoluciones de llamada basadas en decoradores "
"de Flask con nombres similares. Por ejemplo, la señal "
":data:`.request_started` es similar al decorador "
":meth:`~.Flask.before_request`. La ventaja de las señales sobre los "
"manejadores es que pueden suscribirse temporalmente, y no pueden afectar "
"directamente a la aplicación. Esto es útil para pruebas, métricas, "
"auditoría, y más. Por ejemplo, si quieres saber qué plantillas fueron "
"renderizadas en qué partes de qué peticiones, hay una señal que te "
"notificará esa información."

#: ../../signals.rst:21
msgid "Core Signals"
msgstr "Núcleo de las señales"

#: ../../signals.rst:23
msgid ""
"See :ref:`core-signals-list` for a list of all built-in signals. The "
":doc:`lifecycle` page also describes the order that signals and decorators "
"execute."
msgstr ""
"Véase :ref:`core-signals-list` para una lista de todas las señales "
"incorporadas. La página :doc:`lifecycle` también describe el orden en que se"
" ejecutan las señales y los decoradores."

#: ../../signals.rst:28
msgid "Subscribing to Signals"
msgstr "Suscripción a las señales"

#: ../../signals.rst:30
msgid ""
"To subscribe to a signal, you can use the "
":meth:`~blinker.base.Signal.connect` method of a signal.  The first argument"
" is the function that should be called when the signal is emitted, the "
"optional second argument specifies a sender.  To unsubscribe from a signal, "
"you can use the :meth:`~blinker.base.Signal.disconnect` method."
msgstr ""
"Para suscribirse a una señal, se puede utilizar el método "
":meth:`~blinker.base.Signal.connect` de una señal. El primer argumento es la"
" función que debe ser llamada cuando se emite la señal, el segundo argumento"
" opcional especifica un emisor.  Para darse de baja de una señal, puedes "
"utilizar el método :meth:`~blinker.base.Signal.disconnect`."

#: ../../signals.rst:36
msgid ""
"For all core Flask signals, the sender is the application that issued the "
"signal.  When you subscribe to a signal, be sure to also provide a sender "
"unless you really want to listen for signals from all applications.  This is"
" especially true if you are developing an extension."
msgstr ""
"Para todas las señales del núcleo de Flask, el remitente es la aplicación "
"que emitió la señal. Cuando te suscribas a una señal, asegúrate de "
"proporcionar también un remitente a menos que realmente quieras escuchar las"
" señales de todas las aplicaciones. Esto es especialmente cierto si estás "
"desarrollando una extensión."

#: ../../signals.rst:41
msgid ""
"For example, here is a helper context manager that can be used in a unit "
"test to determine which templates were rendered and what variables were "
"passed to the template::"
msgstr ""
"Por ejemplo, aquí hay un gestor de contexto de ayuda que se puede utilizar "
"en una prueba de unidad para determinar qué plantillas se han renderizado y "
"qué variables se han pasado a la plantilla::"

#: ../../signals.rst:59
msgid "This can now easily be paired with a test client::"
msgstr "Ahora se puede emparejar fácilmente con un cliente de prueba::"

#: ../../signals.rst:69
msgid ""
"Make sure to subscribe with an extra ``**extra`` argument so that your calls"
" don't fail if Flask introduces new arguments to the signals."
msgstr ""
"Asegúrate de suscribirte con un argumento extra ``**extra`` para que tus "
"llamadas no fallen si Flask introduce nuevos argumentos en las señales."

#: ../../signals.rst:72
msgid ""
"All the template rendering in the code issued by the application `app` in "
"the body of the ``with`` block will now be recorded in the `templates` "
"variable.  Whenever a template is rendered, the template object as well as "
"context are appended to it."
msgstr ""
"Toda la renderización de plantillas en el código emitido por la aplicación "
"`app` en el cuerpo del bloque ``with`` se registrará ahora en la variable "
"`templates`. Cada vez que se renderiza una plantilla, el objeto de la "
"plantilla así como el contexto se añaden a ella."

#: ../../signals.rst:77
msgid ""
"Additionally there is a convenient helper method "
"(:meth:`~blinker.base.Signal.connected_to`)  that allows you to temporarily "
"subscribe a function to a signal with a context manager on its own.  Because"
" the return value of the context manager cannot be specified that way, you "
"have to pass the list in as an argument::"
msgstr ""
"Además, existe un práctico método de ayuda "
"(:meth:`~blinker.base.Signal.connected_to`) que permite suscribir "
"temporalmente una función a una señal con un gestor de contexto propio. "
"Debido a que el valor de retorno del gestor de contexto no puede ser "
"especificado de esa manera, tienes que pasar la lista como un argumento::"

#: ../../signals.rst:90
msgid "The example above would then look like this::"
msgstr "El ejemplo anterior quedaría así::"

#: ../../signals.rst:98
msgid "Creating Signals"
msgstr "Creación de señales"

#: ../../signals.rst:100
msgid ""
"If you want to use signals in your own application, you can use the blinker "
"library directly.  The most common use case are named signals in a custom "
":class:`~blinker.base.Namespace`.  This is what is recommended most of the "
"time::"
msgstr ""
"Si quieres usar señales en tu propia aplicación, puedes usar la librería "
"blinker directamente.  El caso de uso más común son las señales con nombre "
"en una :class:`~blinker.base.Namespace` personalizada.  Esto es lo que se "
"recomienda la mayoría de las veces::"

#: ../../signals.rst:108
msgid "Now you can create new signals like this::"
msgstr "Ahora puedes crear nuevas señales así::"

#: ../../signals.rst:112
msgid ""
"The name for the signal here makes it unique and also simplifies debugging."
"  You can access the name of the signal with the "
":attr:`~blinker.base.NamedSignal.name` attribute."
msgstr ""
"El nombre de la señal aquí la hace única y también simplifica la depuración."
" Puedes acceder al nombre de la señal con el atributo "
":attr:`~blinker.base.NamedSignal.name`."

#: ../../signals.rst:119
msgid "Sending Signals"
msgstr "Envío de señales"

#: ../../signals.rst:121
msgid ""
"If you want to emit a signal, you can do so by calling the "
":meth:`~blinker.base.Signal.send` method.  It accepts a sender as first "
"argument and optionally some keyword arguments that are forwarded to the "
"signal subscribers::"
msgstr ""
"Si quieres emitir una señal, puedes hacerlo llamando al método "
":meth:`~blinker.base.Signal.send`. Acepta un remitente como primer argumento"
" y, opcionalmente, algunos argumentos de palabras clave que se reenvían a "
"los suscriptores de la señal::"

#: ../../signals.rst:132
msgid ""
"Try to always pick a good sender.  If you have a class that is emitting a "
"signal, pass ``self`` as sender.  If you are emitting a signal from a random"
" function, you can pass ``current_app._get_current_object()`` as sender."
msgstr ""
"Intenta elegir siempre un buen emisor. Si tienes una clase que está "
"emitiendo una señal, pasa ``self`` como emisor. Si estás emitiendo una señal"
" desde una función aleatoria, puedes pasar "
"``current_app._get_current_object()`` como emisor."

#: ../../signals.rst:136
msgid "Passing Proxies as Senders"
msgstr "Pasar proxies como remitentes"

#: ../../signals.rst:138
msgid ""
"Never pass :data:`~flask.current_app` as sender to a signal.  Use "
"``current_app._get_current_object()`` instead.  The reason for this is that "
":data:`~flask.current_app` is a proxy and not the real application object."
msgstr ""
"Nunca pase :data:`~flask.current_app` como remitente de una señal. Utiliza "
"``current_app._get_current_object()`` en su lugar. La razón es que "
":data:`~flask.current_app` es un proxy y no el objeto real de la aplicación."

#: ../../signals.rst:145
msgid "Signals and Flask's Request Context"
msgstr "Señales y contexto de solicitud de Flask"

#: ../../signals.rst:147
msgid ""
"Signals fully support :doc:`reqcontext` when receiving signals. Context-"
"local variables are consistently available between "
":data:`~flask.request_started` and :data:`~flask.request_finished`, so you "
"can rely on :class:`flask.g` and others as needed.  Note the limitations "
"described in :ref:`signals-sending` and the "
":data:`~flask.request_tearing_down` signal."
msgstr ""
"Las señales son totalmente compatibles con :doc:`reqcontext` cuando se "
"reciben señales. Las variables locales de contexto están disponibles de "
"forma consistente entre :data:`~flask.request_started` y "
":data:`~flask.request_finished`, por lo que puede confiar en "
":class:`flask.g` y otros según sea necesario.  Tenga en cuenta las "
"limitaciones descritas en :ref:`signals-sending` y la señal "
":data:`~flask.request_tearing_down`."

#: ../../signals.rst:155
msgid "Decorator Based Signal Subscriptions"
msgstr "Suscripciones de señales basadas en decoradores"

#: ../../signals.rst:157
msgid ""
"You can also easily subscribe to signals by using the "
":meth:`~blinker.base.NamedSignal.connect_via` decorator::"
msgstr ""
"También puedes suscribirte fácilmente a señales utilizando el decorador "
":meth:`~blinker.base.NamedSignal.connect_via`::"
