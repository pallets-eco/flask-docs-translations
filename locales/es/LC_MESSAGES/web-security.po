# SOME DESCRIPTIVE TITLE.
# Copyright (C) 2010 Pallets
# This file is distributed under the same license as the Flask package.
# FIRST AUTHOR <EMAIL@ADDRESS>, 2024.
#
#, fuzzy
msgid ""
msgstr ""
"Project-Id-Version: Flask 3.0.x\n"
"Report-Msgid-Bugs-To: \n"
"POT-Creation-Date: 2024-05-10 19:35-0400\n"
"PO-Revision-Date: 2024-05-20 19:50-0400\n"
"Last-Translator: Luis Alday <alday87@gmail.com>\n"
"Language-Team: ES\n"
"Language: es\n"
"MIME-Version: 1.0\n"
"Content-Type: text/plain; charset=utf-8\n"
"Content-Transfer-Encoding: 8bit\n"
"Plural-Forms: nplurals=2; plural=(n != 1);\n"
"Generated-By: Babel 2.12.1\n"
"X-Generator: Poedit 3.4.4\n"

#: ../../web-security.rst:2
msgid "Security Considerations"
msgstr "Consideraciones de Seguridad"

#: ../../web-security.rst:4
msgid ""
"Web applications usually face all kinds of security problems and it's very "
"hard to get everything right.  Flask tries to solve a few of these things "
"for you, but there are a couple more you have to take care of yourself."
msgstr ""
"Las aplicaciones web suelen enfrentarse a todo tipo de problemas de "
"seguridad y es muy difícil hacerlo todo bien. Flask intenta resolver "
"algunas de estas cosas por usted, pero hay un par más de las que debe "
"ocuparse usted mismo."

#: ../../web-security.rst:11
msgid "Cross-Site Scripting (XSS)"
msgstr "Cross-Site Scripting (XSS)"

#: ../../web-security.rst:13
msgid ""
"Cross site scripting is the concept of injecting arbitrary HTML (and with "
"it JavaScript) into the context of a website.  To remedy this, developers "
"have to properly escape text so that it cannot include arbitrary HTML "
"tags.  For more information on that have a look at the Wikipedia article on "
"`Cross-Site Scripting <https://en.wikipedia.org/wiki/Cross-"
"site_scripting>`_."
msgstr ""
"Cross site scripting es el concepto de inyectar HTML arbitrario (y con él "
"JavaScript) en el contexto de un sitio web. Para remediar esto, los "
"desarrolladores deben escapar el texto correctamente para que no pueda "
"incluir etiquetas HTML arbitrarias. Para obtener más información al "
"respecto, consulta el artículo de Wikipedia sobre `Cross-Site Scripting "
"<https://en.wikipedia.org/wiki/Cross-site_scripting>`_."

#: ../../web-security.rst:20
msgid ""
"Flask configures Jinja2 to automatically escape all values unless "
"explicitly told otherwise.  This should rule out all XSS problems caused in "
"templates, but there are still other places where you have to be careful:"
msgstr ""
"Flask configura Jinja2 para escapar automáticamente todos los valores a "
"menos que se indique explícitamente lo contrario. Esto debería descartar "
"todos los problemas XSS causados ​​en las plantillas, pero todavía hay otros "
"lugares en los que debes tener cuidado:"

#: ../../web-security.rst:25
msgid "generating HTML without the help of Jinja2"
msgstr "generando HTML sin la ayuda de Jinja2"

#: ../../web-security.rst:26
msgid "calling :class:`~markupsafe.Markup` on data submitted by users"
msgstr ""
"llamando a :class:`~markupsafe.Markup` en los datos enviados por los "
"usuarios"

#: ../../web-security.rst:27
msgid ""
"sending out HTML from uploaded files, never do that, use the ``Content-"
"Disposition: attachment`` header to prevent that problem."
msgstr ""
"enviar HTML desde archivos cargados, nunca hagas eso, usa el encabezado "
"``Content-Disposition: adjunto`` para evitar ese problema."

#: ../../web-security.rst:29
msgid ""
"sending out textfiles from uploaded files.  Some browsers are using content-"
"type guessing based on the first few bytes so users could trick a browser "
"to execute HTML."
msgstr ""
"enviar archivos de texto a partir de archivos cargados. Algunos navegadores "
"estan utilizando adivinar el tipo de contenido basándose en los primeros "
"bytes para que los usuarios puedan engañar a un navegador para que ejecute "
"HTML."

#: ../../web-security.rst:33
msgid ""
"Another thing that is very important are unquoted attributes.  While Jinja2 "
"can protect you from XSS issues by escaping HTML, there is one thing it "
"cannot protect you from: XSS by attribute injection.  To counter this "
"possible attack vector, be sure to always quote your attributes with either "
"double or single quotes when using Jinja expressions in them:"
msgstr ""
"Otra cosa que es muy importante son los atributos sin comillas. Si bien "
"Jinja2 puede protegerte de problemas XSS al escapar HTML, hay una cosa de "
"la que no puede protegerte: XSS mediante inyección de atributos. Para "
"contrarrestar este posible vector de ataque, asegúrate de poner tus "
"atributos entre comillas dobles o simples cuando utilices expresiones Jinja "
"en ellos:"

#: ../../web-security.rst:43
msgid ""
"Why is this necessary?  Because if you would not be doing that, an attacker "
"could easily inject custom JavaScript handlers.  For example an attacker "
"could inject this piece of HTML+JavaScript:"
msgstr ""
"¿Por qué es esto necesario? Porque si no lo hiciera, un atacante podría "
"inyectar fácilmente controladores de JavaScript personalizados. Por "
"ejemplo, un atacante podría inyectar este fragmento de HTML+JavaScript:"

#: ../../web-security.rst:51
msgid ""
"When the user would then move with the mouse over the input, the cookie "
"would be presented to the user in an alert window.  But instead of showing "
"the cookie to the user, a good attacker might also execute any other "
"JavaScript code.  In combination with CSS injections the attacker might "
"even make the element fill out the entire page so that the user would just "
"have to have the mouse anywhere on the page to trigger the attack."
msgstr ""
"Cuando el usuario pase el mouse sobre la entrada, la cookie se presentaría "
"al usuario en una ventana de alerta. Pero en lugar de mostrar la cookie al "
"usuario, un buen atacante también podría ejecutar cualquier otro código "
"JavaScript. En combinación con inyecciones de CSS, el atacante podría "
"incluso hacer que el elemento llene toda la página, de modo que el usuario "
"solo tuviera que colocar el mouse en cualquier lugar de la página para "
"desencadenar el ataque."

#: ../../web-security.rst:58
msgid ""
"There is one class of XSS issues that Jinja's escaping does not protect "
"against. The ``a`` tag's ``href`` attribute can contain a `javascript:` "
"URI, which the browser will execute when clicked if not secured properly."
msgstr ""
"Hay una clase de problemas de XSS contra los cuales el entrecomillado de "
"Jinja no protege. El atributo ``href`` de la etiqueta ``a`` puede contener "
"un URI ``javascript:`, que el navegador ejecutará al hacer clic si no está "
"protegido adecuadamente."

#: ../../web-security.rst:67
msgid ""
"To prevent this, you'll need to set the :ref:`security-csp` response header."
msgstr ""
"Para evitar esto, deberás configurar la :ref:`security-csp` del encabezado "
"de respuesta."

#: ../../web-security.rst:70
msgid "Cross-Site Request Forgery (CSRF)"
msgstr "Cross-Site Request Forgery (CSRF)"

#: ../../web-security.rst:72
msgid ""
"Another big problem is CSRF.  This is a very complex topic and I won't "
"outline it here in detail just mention what it is and how to theoretically "
"prevent it."
msgstr ""
"Otro gran problema es CSRF. Este es un tema muy complejo y no lo describiré "
"aquí en detalle, solo mencionaré qué es y cómo prevenirlo teóricamente."

#: ../../web-security.rst:76
msgid ""
"If your authentication information is stored in cookies, you have implicit "
"state management.  The state of \"being logged in\" is controlled by a "
"cookie, and that cookie is sent with each request to a page. Unfortunately "
"that includes requests triggered by 3rd party sites.  If you don't keep "
"that in mind, some people might be able to trick your application's users "
"with social engineering to do stupid things without them knowing."
msgstr ""

#: ../../web-security.rst:84
msgid ""
"Say you have a specific URL that, when you sent ``POST`` requests to will "
"delete a user's profile (say ``http://example.com/user/delete``).  If an "
"attacker now creates a page that sends a post request to that page with "
"some JavaScript they just have to trick some users to load that page and "
"their profiles will end up being deleted."
msgstr ""

#: ../../web-security.rst:90
msgid ""
"Imagine you were to run Facebook with millions of concurrent users and "
"someone would send out links to images of little kittens.  When users would "
"go to that page, their profiles would get deleted while they are looking at "
"images of fluffy cats."
msgstr ""

#: ../../web-security.rst:95
msgid ""
"How can you prevent that?  Basically for each request that modifies content "
"on the server you would have to either use a one-time token and store that "
"in the cookie **and** also transmit it with the form data. After receiving "
"the data on the server again, you would then have to compare the two tokens "
"and ensure they are equal."
msgstr ""

#: ../../web-security.rst:101
msgid ""
"Why does Flask not do that for you?  The ideal place for this to happen is "
"the form validation framework, which does not exist in Flask."
msgstr ""

#: ../../web-security.rst:107
msgid "JSON Security"
msgstr "Seguridad de JSON"

#: ../../web-security.rst:109
msgid ""
"In Flask 0.10 and lower, :func:`~flask.jsonify` did not serialize top-level "
"arrays to JSON. This was because of a security vulnerability in ECMAScript "
"4."
msgstr ""

#: ../../web-security.rst:112
msgid ""
"ECMAScript 5 closed this vulnerability, so only extremely old browsers are "
"still vulnerable. All of these browsers have `other more serious "
"vulnerabilities <https://github.com/pallets/flask/"
"issues/248#issuecomment-59934857>`_, so this behavior was changed and :func:"
"`~flask.jsonify` now supports serializing arrays."
msgstr ""

#: ../../web-security.rst:120
msgid "Security Headers"
msgstr "Cabeceras de Seguridad"

#: ../../web-security.rst:122
msgid ""
"Browsers recognize various response headers in order to control security. "
"We recommend reviewing each of the headers below for use in your "
"application. The `Flask-Talisman`_ extension can be used to manage HTTPS "
"and the security headers for you."
msgstr ""

#: ../../web-security.rst:130
msgid "HTTP Strict Transport Security (HSTS)"
msgstr ""

#: ../../web-security.rst:132
msgid ""
"Tells the browser to convert all HTTP requests to HTTPS, preventing man-in-"
"the-middle (MITM) attacks. ::"
msgstr ""

#: ../../web-security.rst:137
msgid ""
"https://developer.mozilla.org/en-US/docs/Web/HTTP/Headers/Strict-Transport-"
"Security"
msgstr ""
"https://developer.mozilla.org/en-US/docs/Web/HTTP/Headers/Strict-Transport-"
"Security"

#: ../../web-security.rst:142
msgid "Content Security Policy (CSP)"
msgstr "Política de seguridad de contenido (CSP)"

#: ../../web-security.rst:144
msgid ""
"Tell the browser where it can load various types of resource from. This "
"header should be used whenever possible, but requires some work to define "
"the correct policy for your site. A very strict policy would be::"
msgstr ""

#: ../../web-security.rst:150
msgid "https://csp.withgoogle.com/docs/index.html"
msgstr "https://csp.withgoogle.com/docs/index.html"

#: ../../web-security.rst:151
msgid ""
"https://developer.mozilla.org/en-US/docs/Web/HTTP/Headers/Content-Security-"
"Policy"
msgstr ""
"https://developer.mozilla.org/en-US/docs/Web/HTTP/Headers/Content-Security-"
"Policy"

#: ../../web-security.rst:154
msgid "X-Content-Type-Options"
msgstr "X-Content-Type-Options"

#: ../../web-security.rst:156
msgid ""
"Forces the browser to honor the response content type instead of trying to "
"detect it, which can be abused to generate a cross-site scripting (XSS) "
"attack. ::"
msgstr ""
"Obliga al navegador a respetar el tipo de contenido de respuesta en lugar "
"de intentar detectarlo, lo que puede utilizarse de forma abusiva para "
"generar un ataque cross-site scripting (XSS). ::"

#: ../../web-security.rst:162
msgid ""
"https://developer.mozilla.org/en-US/docs/Web/HTTP/Headers/X-Content-Type-"
"Options"
msgstr ""

#: ../../web-security.rst:165
msgid "X-Frame-Options"
msgstr "X-Frame-Options"

#: ../../web-security.rst:167
msgid ""
"Prevents external sites from embedding your site in an ``iframe``. This "
"prevents a class of attacks where clicks in the outer frame can be "
"translated invisibly to clicks on your page's elements. This is also known "
"as \"clickjacking\". ::"
msgstr ""

#: ../../web-security.rst:174
msgid ""
"https://developer.mozilla.org/en-US/docs/Web/HTTP/Headers/X-Frame-Options"
msgstr ""
"https://developer.mozilla.org/en-US/docs/Web/HTTP/Headers/X-Frame-Options"

#: ../../web-security.rst:179
msgid "Set-Cookie options"
msgstr "Opciones de configuración de cookies"

#: ../../web-security.rst:181
msgid ""
"These options can be added to a ``Set-Cookie`` header to improve their "
"security. Flask has configuration options to set these on the session "
"cookie. They can be set on other cookies too."
msgstr ""

#: ../../web-security.rst:185
msgid "``Secure`` limits cookies to HTTPS traffic only."
msgstr "``Secure`` limita las cookies únicamente al tráfico HTTPS."

#: ../../web-security.rst:186
msgid ""
"``HttpOnly`` protects the contents of cookies from being read with "
"JavaScript."
msgstr ""
"``HttpOnly`` protege el contenido de protects the contents of cookies from "
"being read with JavaScript."

#: ../../web-security.rst:188
msgid ""
"``SameSite`` restricts how cookies are sent with requests from external "
"sites. Can be set to ``'Lax'`` (recommended) or ``'Strict'``. ``Lax`` "
"prevents sending cookies with CSRF-prone requests from external sites, such "
"as submitting a form. ``Strict`` prevents sending cookies with all external "
"requests, including following regular links."
msgstr ""

#: ../../web-security.rst:204
msgid ""
"Specifying ``Expires`` or ``Max-Age`` options, will remove the cookie after "
"the given time, or the current time plus the age, respectively. If neither "
"option is set, the cookie will be removed when the browser is closed. ::"
msgstr ""

#: ../../web-security.rst:211
msgid ""
"For the session cookie, if :attr:`session.permanent <flask.session."
"permanent>` is set, then :data:`PERMANENT_SESSION_LIFETIME` is used to set "
"the expiration. Flask's default cookie implementation validates that the "
"cryptographic signature is not older than this value. Lowering this value "
"may help mitigate replay attacks, where intercepted cookies can be sent at "
"a later time. ::"
msgstr ""

#: ../../web-security.rst:229
msgid ""
"Use :class:`itsdangerous.TimedSerializer` to sign and validate other cookie "
"values (or any values that need secure signatures)."
msgstr ""
"Utilice :class:`itsdangerous.TimedSerializer` para firmar y validar otros "
"valores de cookie (o cualquier valor que necesite firmas seguras)."

#: ../../web-security.rst:232
msgid "https://developer.mozilla.org/en-US/docs/Web/HTTP/Cookies"
msgstr "https://developer.mozilla.org/en-US/docs/Web/HTTP/Cookies"

#: ../../web-security.rst:233
msgid "https://developer.mozilla.org/en-US/docs/Web/HTTP/Headers/Set-Cookie"
msgstr "https://developer.mozilla.org/en-US/docs/Web/HTTP/Headers/Set-Cookie"

#: ../../web-security.rst:239
msgid "HTTP Public Key Pinning (HPKP)"
msgstr "HTTP Public Key Pinning (HPKP)"

#: ../../web-security.rst:241
msgid ""
"This tells the browser to authenticate with the server using only the "
"specific certificate key to prevent MITM attacks."
msgstr ""
"Esto le indica al navegador que se autentique en el servidor utilizando "
"solo la clave de certificado específica para prevenir ataques MITM."

#: ../../web-security.rst:245
msgid ""
"Be careful when enabling this, as it is very difficult to undo if you set "
"up or upgrade your key incorrectly."
msgstr ""

#: ../../web-security.rst:248
msgid "https://developer.mozilla.org/en-US/docs/Web/HTTP/Public_Key_Pinning"
msgstr "https://developer.mozilla.org/en-US/docs/Web/HTTP/Public_Key_Pinning"

#: ../../web-security.rst:252
msgid "Copy/Paste to Terminal"
msgstr "Copiar/Pegar a la Terminal"

#: ../../web-security.rst:254
msgid ""
"Hidden characters such as the backspace character (``\\b``, ``^H``) can "
"cause text to render differently in HTML than how it is interpreted if "
"`pasted into a terminal <https://security.stackexchange.com/q/39118>`__."
msgstr ""
"Los caracteres ocultos como es la barra invertida (``\\b``, ``^H``) pueden "
"hacer que el texto se represente de manera diferente en HTML que cómo se "
"interpreta si `se pega en una terminal <https://security.stackexchange.com/"
"q/39118>`__."

#: ../../web-security.rst:258
msgid ""
"For example, ``import y\\bose\\bm\\bi\\bt\\be\\b`` renders as ``import "
"yosemite`` in HTML, but the backspaces are applied when pasted into a "
"terminal, and it becomes ``import os``."
msgstr ""

#: ../../web-security.rst:262
msgid ""
"If you expect users to copy and paste untrusted code from your site, such "
"as from comments posted by users on a technical blog, consider applying "
"extra filtering, such as replacing all ``\\b`` characters."
msgstr ""

#: ../../web-security.rst:270
msgid ""
"Most modern terminals will warn about and remove hidden characters when "
"pasting, so this isn't strictly necessary. It's also possible to craft "
"dangerous commands in other ways that aren't possible to filter. Depending "
"on your site's use case, it may be good to show a warning about copying "
"code in general."
msgstr ""
